swagger: '2.0'
info:
  title: eEcd API
  version: v1
  description: ''
  termsOfService: 'https://www.nxtport.eu/General-Terms-And-Conditions'
  contact:
    email: support@nxtport.eu
schemes:
  - https
host: api.nxtport.eu
basePath: /eecd
security:
  - Authorization: []
    Subscription: []
securityDefinitions:
  Authorization:
    name: Authorization
    in: header
    type: apiKey
    description: 'JWT authorization token using the Bearer scheme. Different for each user of the API. Keep in mind that you have to put the word "Bearer" and then a space in front of the access token. For example "Bearer f8e6d39a81fc4d31957086fe03630858".'
  Subscription:
    type: apiKey
    in: header
    name: Ocp-Apim-Subscription-Key
    description: 'API subscription key. Assigned by NxtPort to your organization.'
paths:
  '/v1/equipment/{equipmentId}/history':
    get:
      tags:
        - Booklets
      summary: Opens the booklet to view the load- and cleaning history.
      description: "<p>\r\n            View the equipment history. Depending on your license and your relation to the equipment, you may see\r\n            only certain parts of the booklet. Cleaners may only open the booklet if they have an active cleaning,\r\n            loaders only when there's an active load. Equipment operators may view their equipment history at all\r\n            times.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Loader</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Viewer</li>\r\n  </ul>\r\n</p>"
      operationId: V1EquipmentByEquipmentIdHistoryGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: equipmentId
          in: path
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BookletData.EquipmentHistory'
  /v1/cleanings/locations:
    post:
      tags:
        - CleaningLocations
      summary: Create a new cleaning location.
      description: "<p>\r\n            Each cleaning organisation should have at least one clenaing location, which is used to indicate\r\n            where cleanings were performed. A cleaning action cannot be started without also specifying the\r\n            location. Organisations that have access to the cleaning, will also be able to see the details\r\n            of the location, including address and phone number.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1CleaningsLocationsPost
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: dto
          in: body
          description: The body containing the details of the location.
          required: false
          schema:
            $ref: '#/definitions/CleaningLocation.CleaningLocationCreate'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Core.Entities.CleaningLocation'
  '/v1/cleanings/locations/{id}':
    get:
      tags:
        - CleaningLocations
      summary: Read a specific cleaning location.
      description: "<p>\r\n            Reads a specific cleaning location. Also includes a list of all users that have access to this\r\n            location.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1CleaningsLocationsByIdGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: id
          in: path
          description: The ID of the cleaning location.
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Core.Entities.CleaningLocation'
    put:
      tags:
        - CleaningLocations
      summary: Update a specific cleaning location.
      description: "<p>\r\n            Updates a specific cleaning location.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1CleaningsLocationsByIdPut
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: id
          in: path
          description: The ID of the cleaning location.
          required: true
          type: string
          format: uuid
        - name: dto
          in: body
          description: The body containing the updated details.
          required: false
          schema:
            $ref: '#/definitions/CleaningLocation.CleaningLocationUpdate'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Core.Entities.CleaningLocation'
    delete:
      tags:
        - CleaningLocations
      summary: Delete a cleaning location.
      description: "<p>\r\n            Deletes a cleaning location.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1CleaningsLocationsByIdDelete
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: id
          in: path
          description: The ID of the cleaning location.
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            type: boolean
  /v1/cleanings/locations/organisation:
    get:
      tags:
        - CleaningLocations
      summary: Get all cleaning locations for an organisation.
      description: "<p>\r\n            Gets a list of all cleaning locations for a given organisation, including the contact details such as\r\n            phone number and address. Does not include the users for each location.\r\n            location.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1CleaningsLocationsOrganisationGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: organisationId
          in: query
          description: ''
          required: false
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Core.Entities.CleaningLocation'
  '/v1/cleanings/locations/{locationId}/users':
    post:
      tags:
        - CleaningLocations
      summary: Assign a user to a cleaning location.
      description: "<p>\r\n            Assigns a user to a cleaning locations. This effectively adds the cleaning location to the list of\r\n            available locations for this user. If the user was already added to this location before, nothing happen\r\n            .\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1CleaningsLocationsByLocationIdUsersPost
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: locationId
          in: path
          description: The ID of the cleaning location
          required: true
          type: string
          format: uuid
        - name: user
          in: body
          description: The body containing the ID of the user.
          required: false
          schema:
            $ref: >-
              #/definitions/Core.Entities.CleaningLocationData.CleaningLocationUser
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Core.Entities.CleaningLocation'
    delete:
      tags:
        - CleaningLocations
      summary: Remove a user from a cleaning location.
      description: "<p>\r\n            Removes a user form a cleaning location, keeping them from selecting the location when starting a\r\n            cleaning action.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1CleaningsLocationsByLocationIdUsersDelete
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: locationId
          in: path
          description: The ID of the cleaning location.
          required: true
          type: string
          format: uuid
        - name: user
          in: body
          description: The body containing the user ID.
          required: false
          schema:
            $ref: >-
              #/definitions/Core.Entities.CleaningLocationData.CleaningLocationUser
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Core.Entities.CleaningLocation'
  '/v1/cleanings/locations/{locationId}/users/bulk':
    post:
      tags:
        - CleaningLocations
      summary: Assign several users to the cleaning location.
      description: "<p>\r\n            Assigns several users at once to a cleaning location. If one or more users were already added,\r\n            they are skipped; no error will be raised.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1CleaningsLocationsByLocationIdUsersBulkPost
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: locationId
          in: path
          description: The ID of the cleaning location.
          required: true
          type: string
          format: uuid
        - name: users
          in: body
          description: The body containing a list of user IDs.
          required: false
          schema:
            type: array
            items:
              $ref: >-
                #/definitions/Core.Entities.CleaningLocationData.CleaningLocationUser
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Core.Entities.CleaningLocation'
    delete:
      tags:
        - CleaningLocations
      summary: Remove several users from a cleaning location.
      description: "<p>\r\n            Removes several users form a cleaning location, keeping them from selecting the location when starting\r\n            a cleaning action.\r\n                 </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1CleaningsLocationsByLocationIdUsersBulkDelete
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: locationId
          in: path
          description: The ID of the location.
          required: true
          type: string
          format: uuid
        - name: users
          in: body
          description: The body containing a list of user IDs.
          required: false
          schema:
            type: array
            items:
              $ref: >-
                #/definitions/Core.Entities.CleaningLocationData.CleaningLocationUser
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Core.Entities.CleaningLocation'
  /v1/cleanings/locations/users:
    get:
      tags:
        - CleaningLocations
      summary: Get all cleaning locations for a user.
      description: "<p>\r\n            Gets a list of all cleaning locations to which a user has access.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1CleaningsLocationsUsersGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: userId
          in: query
          description: >-
            The ID of the user. Optional. Takes the currently logged in user if
            no ID is given.
          required: false
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Core.Entities.CleaningLocation'
  '/v1/equipment/{equipmentId}/cleaningactions':
    post:
      tags:
        - Cleanings
      summary: Start a cleaning action.
      description: "<p>\r\n            Starts a new cleaning action. This is required to view the booklet containing the equipment history.\r\n            Only one active cleaning action is permitted per equipment.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n  </ul>\r\n</p>"
      operationId: V1EquipmentByEquipmentIdCleaningactionsPost
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: equipmentId
          in: path
          description: The ID of the equipment.
          required: true
          type: string
          format: uuid
        - name: dto
          in: body
          description: The body containing the cleaning location.
          required: false
          schema:
            $ref: '#/definitions/BookletData.CleaningActionCreate'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BookletData.CleaningAction'
  '/v1/equipment/{equipmentId}/cleaningactions/{cleaningId}':
    get:
      tags:
        - Cleanings
      summary: Get a single cleaning action.
      description: "<p>\r\n            Gets a single cleaning action performed on an equipment. Details include its compartments, as well as all used cleaning codes and comments. The\r\n            cleaning action also specifies its type, and when it was performed.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n</p>"
      operationId: V1EquipmentByEquipmentIdCleaningactionsByCleaningIdGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: equipmentId
          in: path
          description: The ID of the equipment.
          required: true
          type: string
          format: uuid
        - name: cleaningId
          in: path
          description: The ID of the cleaning action.
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BookletData.CleaningAction'
    put:
      tags:
        - Cleanings
      summary: Update a cleaning action.
      description: "<p>\r\n            Updates a cleaning action. This can be done to any cleaning action that has not yet been signed off by\r\n            the driver.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n  </ul>\r\n</p>"
      operationId: V1EquipmentByEquipmentIdCleaningactionsByCleaningIdPut
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: equipmentId
          in: path
          description: The ID of the equipment.
          required: true
          type: string
          format: uuid
        - name: cleaningId
          in: path
          description: The ID of the cleaning.
          required: true
          type: string
          format: uuid
        - name: dto
          in: body
          description: The body containing the details of the cleaning action.
          required: false
          schema:
            $ref: '#/definitions/BookletData.CleaningUpdate'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BookletData.CleaningAction'
  /v1/cleaningactions:
    get:
      tags:
        - Cleanings
      summary: Get all active cleaning actions.
      description: "<p>\r\n            Gets a list of all cleaning actions for the logged in organisation that are still planned or\r\n            have been completed. Cleanings that have been signed off by the driver will not appear in this\r\n            list. It is possible to view the cleanings of a specific equipmentID.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n  </ul>\r\n</p>"
      operationId: V1CleaningactionsGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: equipmentId
          in: query
          description: "Optional. When provided, only the active cleanings of the specified \r\n            equipment will be returned."
          required: false
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/BookletData.CleaningAction'
  '/v1/equipment/{equipmentId}/cleaningactions/{cleaningActionId}/complete':
    put:
      tags:
        - Cleanings
      summary: Complete a cleaning.
      description: "<p>\r\n            Completes a cleaning action. Similar to Update, with the main difference that this method alters the\r\n            state of the cleaning action. Only planned cleaning actions can be completed.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n  </ul>\r\n</p>"
      operationId: V1EquipmentByEquipmentIdCleaningactionsByCleaningactionIdCompletePut
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: equipmentId
          in: path
          description: The ID of the equipment.
          required: true
          type: string
          format: uuid
        - name: cleaningActionId
          in: path
          description: The ID of the cleaning action.
          required: true
          type: string
          format: uuid
        - name: dto
          in: body
          description: "The body containing the information about the cleaning action. The cleaning action\r\n            will be updated with these values."
          required: false
          schema:
            $ref: '#/definitions/BookletData.CleaningUpdate'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BookletData.CleaningAction'
  '/v1/equipment/{equipmentId}/cleaningactions/{cleaningactionId}/signoff':
    put:
      tags:
        - Cleanings
      summary: Sign off a cleaning action.
      description: "<p>\r\n            Sign off a cleaning action, typically done by the driver of the equipment. After the cleaning action\r\n            has been signed, it can no longer be modified. When calling this method, a credit will be spent from\r\n            the equipment operator's account.\r\n                </p>\r\n<p>\r\n  <code><pre>\r\n            {\r\n                \"DriverName\": \"John Doe\",\r\n                \"DriverComments\" : \"Cleaning performed okay, but...\",\r\n                \"Signature\": \"data:image/gif;base64,...\"\r\n            }\r\n                    </pre></code>\r\n</p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n  </ul>\r\n</p>"
      operationId: V1EquipmentByEquipmentIdCleaningactionsByCleaningactionIdSignoffPut
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: equipmentId
          in: path
          description: The ID of the equipment.
          required: true
          type: string
          format: uuid
        - name: cleaningActionId
          in: path
          description: The ID of the cleaning action.
          required: true
          type: string
          format: uuid
        - name: signOff
          in: body
          description: "The body containing the driver's name and signature, encoded as a base 64\r\n            data url."
          required: false
          schema:
            $ref: '#/definitions/BookletData.SignOffCleaning'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BookletData.CleaningSignoff'
  '/v1/equipment/{equipmentId}/cleaningactions/{cleaningactionId}/postsignoffcomment':
    post:
      tags:
        - Cleanings
      summary: Add a comment to the cleaning action.
      description: "<p>\r\n            Adds a comment to the cleaning action. This may be done after the driver has signed off the cleaning\r\n            action, and may be done more than once.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n  </ul>\r\n</p>"
      operationId: >-
        V1EquipmentByEquipmentIdCleaningactionsByCleaningactionIdPostsignoffcommentPost
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: equipmentId
          in: path
          description: The ID of the equipment.
          required: true
          type: string
          format: uuid
        - name: cleaningActionId
          in: path
          description: The ID of the cleaning action.
          required: true
          type: string
          format: uuid
        - name: comment
          in: body
          description: The comment that needs to be added to the cleaning action.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BookletData.CleaningAction'
  '/v1/equipment/{equipmentId}/cleaningactions/{cleaningactionId}/signature':
    get:
      tags:
        - Cleanings
      summary: Get the signature of a signed off cleaning.
      description: "<p>\r\n            Gets the signature of a signed off cleaning as a base-64 encoded data url.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>EquipmentOperator</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n</p>"
      operationId: V1EquipmentByEquipmentIdCleaningactionsByCleaningactionIdSignatureGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: equipmentId
          in: path
          description: The ID of the equipment.
          required: true
          type: string
          format: uuid
        - name: cleaningActionId
          in: path
          description: The ID of the cleaning action.
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            type: string
  '/v1/equipment/{equipmentId}/cleaningactions/{cleaningactionId}/attachment':
    post:
      tags:
        - Cleanings
      summary: Upload a document to a cleaning.
      description: "<p>\r\n            Attaches a file to the cleaning, to be stored on the server for the duration of the life time\r\n            of the cleaning. Once the cleaning is purged from the booklet, so will its attached documents.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n  </ul>\r\n</p>"
      operationId: V1EquipmentByEquipmentIdCleaningactionsByCleaningactionIdAttachmentPost
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: equipmentId
          in: path
          description: The ID of the equipment.
          required: true
          type: string
          format: uuid
        - name: cleaningActionId
          in: path
          description: The ID of the cleaning action.
          required: true
          type: string
          format: uuid
        - name: ContentType
          in: formData
          required: false
          type: string
        - name: ContentDisposition
          in: formData
          required: false
          type: string
        - name: Headers
          in: formData
          required: false
          type: object
        - name: Length
          in: formData
          required: false
          type: integer
          format: int64
        - name: Name
          in: formData
          required: false
          type: string
        - name: FileName
          in: formData
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BookletData.Attachment'
  '/v1/equipment/{equipmentId}/cleaningactions/{cleaningactionId}/attachment/{attachmentId}':
    get:
      tags:
        - Cleanings
      summary: Download a document attached to a cleaning action..
      description: "<p>\r\n            Returns the attached document as a downloadable file.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>EquipmentOperator</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Despatcher</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n</p>"
      operationId: >-
        V1EquipmentByEquipmentIdCleaningactionsByCleaningactionIdAttachmentByAttachmentIdGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: equipmentId
          in: path
          description: The ID of the equipment.
          required: true
          type: string
          format: uuid
        - name: cleaningActionId
          in: path
          description: The ID of the cleaning action.
          required: true
          type: string
          format: uuid
        - name: attachmentId
          in: path
          description: The ID of the attached document.
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Models.FileResponse'
  '/v1/equipment/{equipmentId}/cleaningactions/{cleaningId}/cancel':
    put:
      tags:
        - Cleanings
      summary: Cancel a planned cleaning.
      description: "<p>\r\n            Cancels a cleaning that has been started. Note that the cancelled cleaning still appears in logs\r\n            and the booklet containing the equipment history.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>EquipmentOperator</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n  </ul>\r\n</p>"
      operationId: V1EquipmentByEquipmentIdCleaningactionsByCleaningIdCancelPut
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: equipmentId
          in: path
          description: The ID of the equipment.
          required: true
          type: string
          format: uuid
        - name: cleaningId
          in: path
          description: the ID of the cleaning action.
          required: true
          type: string
          format: uuid
        - name: comment
          in: body
          description: Comment explaining why the cleaning had to be cancelled.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BookletData.CleaningAction'
  '/v1/credits/add/{amount}':
    post:
      tags:
        - Credits
      summary: Add credits to a wallet.
      description: "<p>\r\n            Adds credits to the wallet in the form of a credit pack. A credit pack contains credits, as well as a\r\n            full history of all transactions made for these credits. As long as there is at least one active credit\r\n            pack containing a credit, \r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>CommunityAdmin</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n</p>"
      operationId: V1CreditsAddByAmountPost
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: amount
          in: path
          description: The amount of credits that need to be added to the wallet.
          required: true
          type: integer
          format: int32
        - name: organisationId
          in: query
          description: "The ID of the organisation that receives the credits. Optional.\r\n            When omitted, the logged in user's organisation is used."
          required: false
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Core.Entities.CreditData.CreditPack'
  /v1/credits:
    get:
      tags:
        - Credits
      summary: Get a summary of the amount of remaining credits.
      description: "<p>\r\n            Gets a summary of all active credit packs, including the amount of remaining credits.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n  </ul>\r\n</p>"
      operationId: V1CreditsGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreditData.CreditWalletSummary'
        '404':
          description: Not Found
  '/v1/credits/warningthreshold/{warningThreshold}':
    put:
      tags:
        - Credits
      summary: Update the threshold for notifications.
      description: "<p>\r\n            Updates the amount of credits below which notifications should be sent to the organisations\r\n            that own the wallet. This amount is spread accross all active credit packs; if the total sum of\r\n            all remaining credits is below this threshold, mails will be sent in certain intervals.\r\n                </p>\r\n<p>\r\n  <b>NOTE: Email notifications are for phase 2, and are not implemented yet.</b>\r\n</p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n  </ul>\r\n</p>"
      operationId: V1CreditsWarningthresholdByWarningThresholdPut
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: warningThreshold
          in: path
          description: The amount of credits below which you should be notified.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Core.Entities.CreditData.CreditWallet'
  /v1/credits/transactions:
    get:
      tags:
        - Credits
      summary: Get all transactions between two dates.
      description: "<p>\r\n            Gets all credit transactions between two dates. If no dates are given, <b>all</b> transactions will be\r\n            returned. \r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n  </ul>\r\n</p>"
      operationId: V1CreditsTransactionsGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: dateStart
          in: query
          description: "The start date for the search. Optional; if omitted, all previous transactions\r\n            up until the end date will be returned."
          required: false
          type: string
          format: date-time
        - name: dateEnd
          in: query
          description: "The end date for the search. Optional; if omitted, all transactions starting\r\n            from the start date will be returned."
          required: false
          type: string
          format: date-time
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Core.Entities.CreditData.CreditTransaction'
  '/v1/organisations/{organisationId}/credits':
    get:
      tags:
        - Credits
      summary: Get the remaining credits of an organisation.
      description: "<p>\r\n            Gets a summary of the credits of a specific organisation.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n</p>"
      operationId: V1OrganisationsByOrganisationIdCreditsGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: organisationId
          in: path
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreditData.CreditWalletSummary'
        '404':
          description: Not Found
  /v1/credits/wallets:
    get:
      tags:
        - Credits
      summary: Get a summary of the remaining credits per wallet.
      description: "<p>\r\n            Gets an overview of the amount of remaining credits per wallet, ordered by least amount of remaining\r\n            credits first. The IDs of the organisations that own the wallet are included, as well as the\r\n            threshold below which they'd like to be notified. Optionally provide a maximum amount of credits, to\r\n            only show those wallets below this amount.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n</p>"
      operationId: V1CreditsWalletsGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: limit
          in: query
          description: "The maximum amount of remaining credits to show up in the results. Optional;\r\n            returns all wallets by default."
          required: false
          type: integer
          format: int32
        - name: page
          in: query
          description: The index of the page. Optional; defaults to 1.
          required: false
          type: integer
          format: int32
        - name: pageSize
          in: query
          description: The maximum amount of results per page. Optional; defaults to 20.
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            $ref: >-
              #/definitions/Core.Abstraction.ResultsPage`1[[Nallian.eEcd.Api.Abstractions.CreditData.WalletSummary,
              Nallian.eEcd.Api.Abstractions, Version=1.0.0.0, Culture=neutral,
              PublicKeyToken=null]]
  /v1/eecds/logs:
    get:
      tags:
        - EEcds
      summary: Get an overview of all created EEcds between two dates.
      description: "<p>\r\n            Gets a paged list of every single EEcd transaction between two dates. \r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n</p>"
      operationId: V1EecdsLogsGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: dateStart
          in: query
          description: The start date of the search.
          required: false
          type: string
          format: date-time
        - name: dateEnd
          in: query
          description: The end date of the search.
          required: false
          type: string
          format: date-time
      responses:
        '200':
          description: Success
          schema:
            $ref: >-
              #/definitions/Core.Abstraction.ResultsPage`1[[Nallian.eEcd.Api.Abstractions.EEcdLog.EEcdLog,
              Nallian.eEcd.Api.Abstractions, Version=1.0.0.0, Culture=neutral,
              PublicKeyToken=null]]
  /v1/eftcocleaningcodes:
    get:
      tags:
        - EftcoCleaningCodes
      summary: Get all EFTCO codes.
      description: "<p>\r\n            Gets all EFTCO cleaning codes, including a description in the desired language. If no language is\r\n            given, Dutch descriptions will be returned.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n</p>"
      operationId: V1EftcocleaningcodesGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: lang
          in: query
          description: >-
            The language in which the descriptions need to be returned. Either
            NL, EN, FR or DE.
          required: false
          type: string
          enum:
            - NL
            - EN
            - FR
            - DE
        - name: code
          in: query
          description: "Optional. Search string to narrow down the results to only contain the specified\r\n            code."
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/ftcoCleaningCodes.EftcoCleaningCodeSummary'
    post:
      tags:
        - EftcoCleaningCodes
      summary: Create an EFTCO code.
      description: "<p>\r\n            Creates an EFTCO cleaning code, including descriptions in all supported languages. The name of the\r\n            updated code may not already exist, and all descriptions must be filled in. We currently support\r\n            the following languages: NL, EN, FR and DE. At least all of these languages must be present in the\r\n            DTO, but additional ones may be given if desired.\r\n                </p>\r\n<code><pre>\r\n            POST v1/eftcocleaningcodes\r\n            {\r\n                \"code\" : \"Hello World\",\r\n                \"descriptions\" : {\r\n                    \"EN\" : \"Hello world!\",\r\n                    \"NL\" : \"Hallo wereld!\",\r\n                    \"FR\" : \"Bonjour monde!\",\r\n                    \"DE\" : \"Gutentag Welt!\"\r\n                }\r\n            }\r\n            </pre></code>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n</p>"
      operationId: V1EftcocleaningcodesPost
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: dto
          in: body
          description: >-
            The code, as well as descriptions in (at least) all supported
            languages.
          required: false
          schema:
            $ref: '#/definitions/ftcoCleaningCodes.EftcoCleaningCodeCreate'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Core.Entities.EftcoCleaningCode'
        '400':
          description: Bad Request
  /v1/eftcocleaningcodes/validate:
    get:
      tags:
        - EftcoCleaningCodes
      summary: Check whether the cleaning would pass validation.
      description: "<p>\r\n            Checks whether the set of used EFTCO cleaning codes is considered valid for the specified type of\r\n            cleaning. Standard cleanings have no demands other than that the passed Eftco cleaning codes need\r\n            to be known by the application, but polymer cleanings need to adhere to a specific set of required\r\n            and optional codes. If a code is optional, it needs to be accompanied by a comment explaining its\r\n            absense.\r\n                </p>\r\n<p>\r\n  <code><pre>\r\n            /equipment/cleaningactions/validate?type=polymer&amp;codes=E58,T01,E63,P10,E61,E62,E64,E77,E78,E72&amp;commented=E57,E56\r\n            \r\n            Result:\r\n            {\r\n                \"isValid\": false,\r\n                \"errors\": [\r\n                    \"Code E79 is required, but was not found.\",\r\n                    \"Code E90 is optional, but was not found, and was not yet commented.\",\r\n                    \"At least 1 of the following codes need(s) to be present: E35, P30.\"\r\n                ],\r\n                \"missingOptionalCodesCodes\": [\r\n                    \"E90\"\r\n                ]\r\n            }\r\n                </pre></code>\r\n</p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>EquipmentOperator</li>\r\n    <li>Seller</li>\r\n    <li>CommunityAdmin</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n  </ul>\r\n</p>"
      operationId: V1EftcocleaningcodesValidateGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: type
          in: query
          description: The type of cleaning. Either Standard or Polymer.
          required: false
          type: string
          enum:
            - STANDARD
            - POLYMER
        - name: codes
          in: query
          description: "The comma-seperated list of EFTCO cleaning codes that have been used to clean the\r\n            equipment."
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: commented
          in: query
          description: "The comma-seperated list of EFTCO cleaning codes that are missing, but are\r\n            accompanied by a comment indicating the reason for them not having been used."
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BookletData.Cleaning.CodeValidationResult'
  /v1/equipment/cleaningactions/validate:
    get:
      tags:
        - EftcoCleaningCodes
      summary: Check whether the cleaning would pass validation.
      description: "<p>\r\n            Checks whether the set of used EFTCO cleaning codes is considered valid for the specified type of\r\n            cleaning. Standard cleanings have no demands other than that the passed Eftco cleaning codes need\r\n            to be known by the application, but polymer cleanings need to adhere to a specific set of required\r\n            and optional codes. If a code is optional, it needs to be accompanied by a comment explaining its\r\n            absense.\r\n                </p>\r\n<p>\r\n  <code><pre>\r\n            /equipment/cleaningactions/validate?type=polymer&amp;codes=E58,T01,E63,P10,E61,E62,E64,E77,E78,E72&amp;commented=E57,E56\r\n            \r\n            Result:\r\n            {\r\n                \"isValid\": false,\r\n                \"errors\": [\r\n                    \"Code E79 is required, but was not found.\",\r\n                    \"Code E90 is optional, but was not found, and was not yet commented.\",\r\n                    \"At least 1 of the following codes need(s) to be present: E35, P30.\"\r\n                ],\r\n                \"missingOptionalCodesCodes\": [\r\n                    \"E90\"\r\n                ]\r\n            }\r\n                </pre></code>\r\n</p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>EquipmentOperator</li>\r\n    <li>Seller</li>\r\n    <li>CommunityAdmin</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n  </ul>\r\n</p>"
      operationId: V1EquipmentCleaningactionsValidateGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: type
          in: query
          description: The type of cleaning. Either Standard or Polymer.
          required: false
          type: string
          enum:
            - STANDARD
            - POLYMER
        - name: codes
          in: query
          description: "The comma-seperated list of EFTCO cleaning codes that have been used to clean the\r\n            equipment."
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: commented
          in: query
          description: "The comma-seperated list of EFTCO cleaning codes that are missing, but are\r\n            accompanied by a comment indicating the reason for them not having been used."
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BookletData.Cleaning.CodeValidationResult'
  '/v1/eftcocleaningcodes/{id}':
    get:
      tags:
        - EftcoCleaningCodes
      summary: Read an EFTCO cleaning code.
      description: "<p>\r\n            Reads an EFTCO cleaning code including descriptions in all supported languages, if it exists. As\r\n            this returns all information about the entity, rather than just a summary, this call is only \r\n            accessible to Community Admins.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n</p>"
      operationId: V1EftcocleaningcodesByIdGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: id
          in: path
          description: The ID of the EFTCO cleaning code.
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Core.Entities.EftcoCleaningCode'
        '400':
          description: Bad Request
        '404':
          description: Not Found
    put:
      tags:
        - EftcoCleaningCodes
      summary: Update an EFTCO cleaning code.
      description: "<p>\r\n            Updates an EFTCo cleaning code. The same rules apply as for creating the EFTCO cleaning code.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n</p>"
      operationId: V1EftcocleaningcodesByIdPut
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: id
          in: path
          description: The ID of the EFTCO cleaning code.
          required: true
          type: string
          format: uuid
        - name: dto
          in: body
          description: The updated details of the EFTCO cleaning code.
          required: false
          schema:
            $ref: '#/definitions/ftcoCleaningCodes.EftcoCleaningCodeUpdate'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Core.Entities.EftcoCleaningCode'
        '400':
          description: Bad Request
        '404':
          description: Not Found
    delete:
      tags:
        - EftcoCleaningCodes
      summary: Delete an EFTCO cleaning code.
      description: "<p>\r\n            Deletes an EFTCO cleaning code, if it exists.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n</p>"
      operationId: V1EftcocleaningcodesByIdDelete
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: id
          in: path
          description: The ID of the cleaning code.
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            type: boolean
        '400':
          description: Bad Request
        '404':
          description: Not Found
  /v1/eftcocleaningcodes/search:
    get:
      tags:
        - EftcoCleaningCodes
      summary: Search EFTCO cleaning codes.
      description: "<p>\r\n            Allows you to search for EFTCO cleaning codes. This differs from /v1/eftcocleaningcodes in that this\r\n            method returns entire entities, including creation- and update details. This also includes all\r\n            languages, rather than just the one requested in the other call. It is for that reason that this\r\n            call is restricted to Community Admins.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n</p>"
      operationId: V1EftcocleaningcodesSearchGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: code
          in: query
          description: >-
            Part of the cleaning code you're looking for. Optional; defaults to
            all codes.
          required: false
          type: string
        - name: page
          in: query
          description: The index of the page. Optional; defaults to 1.
          required: false
          type: integer
          format: int32
        - name: pageSize
          in: query
          description: The size of each page. Optional; defaults to 20.
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            type: boolean
        '400':
          description: Bad Request
        '404':
          description: Not Found
  /v1/equipment:
    get:
      tags:
        - Equipment
      summary: Search for equipment. Obsolete; please use the paged version instead.
      description: "<p>\r\n            Searches for equipment of a specific equipment operator, that satisfies the search condition. Obsolete;\r\n            better use the paged version instead, as that gives information about the amount of remaining pages.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n</p>"
      operationId: V1EquipmentGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: operatorId
          in: query
          description: The ID of the equipment operator.
          required: false
          type: string
          format: uuid
        - name: search
          in: query
          description: "Search string. Searches for license plates and container IDs.\r\n            Needs to be at least 2 characters long."
          required: false
          type: string
        - name: page
          in: query
          description: The page index that needs to be returned. Optional; defaults to 1.
          required: false
          type: integer
          format: int32
        - name: pageSize
          in: query
          description: The size of each page that gets returned. Optional; defaults to 20.
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/MasterData.Equipment'
      deprecated: true
    post:
      tags:
        - Equipment
      summary: Create an equipment.
      description: "<p>\r\n            Creates a new equipment. No equipment with the same license plate or container ID may exist for the\r\n            same equipment owner.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Equipment Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1EquipmentPost
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: equipment
          in: body
          description: The body containing the details of the equipment.
          required: false
          schema:
            $ref: '#/definitions/MasterData.Equipment'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MasterData.Equipment'
        '400':
          description: Bad Request
  /v1/equipment/paged:
    get:
      tags:
        - Equipment
      summary: Search for equipment.
      description: "<p>\r\n            Searches for equipment of a specific equipment operator, that satisfies the search condition. The list\r\n            that gets returned gets wrapped in a container that specifies how many more pages can be obtained.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n</p>"
      operationId: V1EquipmentPagedGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: operatorId
          in: query
          description: The ID of the equipment operator.
          required: false
          type: string
          format: uuid
        - name: search
          in: query
          description: "Search string. Searches for license plates and container IDs.\r\n            Needs to be at least 2 characters long."
          required: false
          type: string
        - name: page
          in: query
          description: The page index that needs to be returned. Optional; defaults to 1.
          required: false
          type: integer
          format: int32
        - name: pageSize
          in: query
          description: The size of each page that gets returned. Optional; defaults to 20.
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            $ref: >-
              #/definitions/Core.Abstraction.ResultsPage`1[[Nallian.eEcd.Api.Abstractions.MasterData.Equipment,
              Nallian.eEcd.Api.Abstractions, Version=1.0.0.0, Culture=neutral,
              PublicKeyToken=null]]
  '/v1/equipment/{id}':
    get:
      tags:
        - Equipment
      summary: Get an equipment.
      description: "<p>\r\n            Gets a piece of equipment. It is possible to also include the cleanliness state, giving an overview\r\n            of the compartments and whether or not they're clean.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n</p>"
      operationId: V1EquipmentByIdGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: id
          in: path
          description: The ID of the equipment.
          required: true
          type: string
          format: uuid
        - name: includeCleanliness
          in: query
          description: "Whether or not to include the cleanliness state. Optional; defaults\r\n            to false."
          required: false
          type: boolean
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MasterData.Equipment'
    put:
      tags:
        - Equipment
      summary: Update an equipment.
      description: "<p>\r\n            Updates an equipment. As with creating an equipment, the updated equipment has to have a unique license\r\n            plate or container ID within the organisation.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Equipment Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1EquipmentByIdPut
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: id
          in: path
          description: the ID of the equipment.
          required: true
          type: string
          format: uuid
        - name: dto
          in: body
          description: The body containing the updated details of the equipment.
          required: false
          schema:
            $ref: '#/definitions/MasterData.EquipmentPut'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MasterData.Equipment'
        '400':
          description: Bad Request
    delete:
      tags:
        - Equipment
      summary: Delete an equipment.
      description: "<p>\r\n            Deletes a piece of equipment.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Equipment Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1EquipmentByIdDelete
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: id
          in: path
          description: The ID of the equipment.
          required: true
          type: string
          format: uuid
      responses:
        '204':
          description: Success
          schema:
            type: boolean
  /v1/equipment/import:
    post:
      tags:
        - Equipment
      summary: Create multiple pieces of equipment.
      description: "<p>\r\n            Import a list of pieces of equipment. The list has to adhere to a few rules:\r\n                    <ul><li>It may not be longer than 200 records;</li><li>Every record must have a unique reference greater than 0;</li></ul>\r\n            Equipment that is already known gets updated, whereas new equipment gets created. An overview of\r\n            all modifications is returned per reference.\r\n                </p>\r\n<p>\r\n  <code><pre>\r\n             [\r\n                     {\r\n                         \"ref\": 1,\r\n                         \"id\": \"08d5cc76-7dd3-d1ca-4f4b-e1aa5afb5a4e\",\r\n                         \"success\": true,\r\n                         \"validationErrors\": [],\r\n                         \"errorMessage\": \"\"\r\n                    },\r\n                    {\r\n                        \"ref\": 2,\r\n                        \"success\": false,\r\n                        \"validationErrors\": [\r\n                        {\r\n                            \"key\": \"LicensePlate\",\r\n                            \"errors\": [\r\n                                \"The LicensePlate field is required for type TANKTRAILER\"\r\n                            ]\r\n                        },\r\n                        {\r\n                            \"key\": \"NumberOfCompartments\",\r\n                            \"errors\": [\r\n                                \"The NumberOfCompartments field does not match the Compartments.\"\r\n                            ]\r\n                        }\r\n                    ],\r\n                    \"errorMessage\": \"The LicensePlate field is required for type TANKTRAILER\\nThe NumberOfCompartments field does not match the Compartments.\"\r\n                }\r\n            ]\r\n                    </pre></code>\r\n</p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Equipment Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1EquipmentImportPost
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: equipments
          in: body
          description: The list of equipment.
          required: false
          schema:
            type: array
            items:
              $ref: '#/definitions/MasterData.EquipmentImport'
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/MasterData.BulkResult'
        '400':
          description: Bad Request
  /v1/equipment/bulk:
    delete:
      tags:
        - Equipment
      summary: Delete multiple pieces of equipment.
      description: "<p>\r\n            Deleted multiple pieces of equipment in bulk. Refer to Import equipment for a more detailed\r\n            explanation.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Equipment Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1EquipmentBulkDelete
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: equipments
          in: body
          description: The list of equipment to be deleted.
          required: false
          schema:
            type: array
            items:
              $ref: '#/definitions/MasterData.EquipmentDelete'
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/MasterData.BulkResult'
        '400':
          description: Bad Request
  '/v1/equipment/{equipmentId}/cleanliness':
    get:
      tags:
        - Equipment
      summary: Get the cleanliness state of an equipment.
      description: "<p>\r\n            Determines the cleanliness state of a piece of equipment. If all compartments are clean, the equipment\r\n            is considered clean; if all compartments are dirty, it is considered dirty. Equipment can also be\r\n            partially dirty. Compartments are either clean or dirty, there is no middle ground.\r\n                </p>\r\n<p>\r\n            For polymer cleanings, the polymer completeness state is added as well. Regardless of whether a\r\n            cleaning was polymer complete or not; if the cleaning was performed, it is still considered as\r\n            clean.\r\n            </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n</p>"
      operationId: V1EquipmentByEquipmentIdCleanlinessGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: equipmentId
          in: path
          description: The ID of the equipment.
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/quipment.EquipmentCleanliness'
  /v1/licensee:
    get:
      tags:
        - Licenses
      summary: 'Search for an organisation, based on a given license role.'
      description: "<p>\r\n            Searches for organisations of a specific role. This is typically used to search for a specific\r\n            equipment operator, cleaner or loader.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Seller</li>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Community Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Eecd Provisioning Admin</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Location Manager</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1LicenseeGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: role
          in: query
          description: "The role for which to search. For available roles, refer to\r\n            organisations/roles."
          required: false
          type: string
          enum:
            - EquipmentOperator
            - Seller
            - Loader
            - Cleaner
        - name: search
          in: query
          description: "Part of the nameof the organisation you're searching for. Needs to be at least\r\n            2 characters long."
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Organisations.Output.OrganisationMinimal'
  '/v1/organisations/{organisationId}/license':
    get:
      tags:
        - Licenses
      summary: Get the license that is currently active for a given organisation.
      description: "<p>\r\n            Gets the license of an organisation. An organisation may have more than one license, but only one\r\n            is considered active at any time. Organisations may only ask for their own license; only community\r\n            admins may view the license for other organisations.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Seller</li>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Community Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Eecd Provisioning Admin</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Location Manager</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1OrganisationsByOrganisationIdLicenseGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: organisationId
          in: path
          description: The ID of the organisation.
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MasterData.License'
  /v1/licenses:
    post:
      tags:
        - Licenses
      summary: Create a new license.
      description: "<p>\r\n            Creates a new license for an organisation. The license may not overlap with any existing active\r\n            licenses for the organisation.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n</p>"
      operationId: V1LicensesPost
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: license
          in: body
          description: The body containing the license details.
          required: false
          schema:
            $ref: '#/definitions/MasterData.License'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MasterData.License'
  '/v1/licenses/{id}':
    put:
      tags:
        - Licenses
      summary: Update a license.
      description: "<p>\r\n            Updates a license. the updated license may not overlap with existing licenses.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n</p>"
      operationId: V1LicensesByIdPut
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: id
          in: path
          description: The ID of the license.
          required: true
          type: string
          format: uuid
        - name: license
          in: body
          description: The body containing the updated details of the license.
          required: false
          schema:
            $ref: '#/definitions/MasterData.License'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MasterData.License'
    delete:
      tags:
        - Licenses
      summary: Delete a license.
      description: "<p>\r\n            Deletes a license.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n</p>"
      operationId: V1LicensesByIdDelete
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: id
          in: path
          description: The ID of the license.
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            type: boolean
  /v1/licenses/exigent:
    get:
      tags:
        - Licenses
      summary: Get all licenses that are about to expire.
      description: "<p>\r\n            Gets a paged list of licenses that are about to expire, and demand attention. Do note that\r\n            this list does not check whether or not a license is followed by another valid license- that\r\n            will be up to the community admin. The suggestion would be to have only one active license per\r\n            organisation at a time.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n</p>"
      operationId: V1LicensesExigentGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: nDaysUntilExpire
          in: query
          description: "The maximum amount of days that a license may still be valid.\r\n            Optional; defaults to 30, meaning all license expiring within the next 30 days."
          required: false
          type: integer
          format: int32
        - name: page
          in: query
          description: The index of the page. Optional; defaults to 1.
          required: false
          type: integer
          format: int32
        - name: pageSize
          in: query
          description: The size of each page. Optional; defaults to 20.
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            $ref: >-
              #/definitions/Core.Abstraction.ResultsPage`1[[Nallian.eEcd.Api.Abstractions.MasterData.ExigentLicenseSummary,
              Nallian.eEcd.Api.Abstractions, Version=1.0.0.0, Culture=neutral,
              PublicKeyToken=null]]
  /v1/products/locations:
    post:
      tags:
        - LoadingLocations
      summary: Create a loading location.
      description: "<p>\r\n            Creates a new loading location. Sellers are responsible for maintaining a list of locations where\r\n            their product may be loaded.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1ProductsLocationsPost
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: dto
          in: body
          description: The body containing the details of the loading location.
          required: false
          schema:
            $ref: '#/definitions/LoadingLocation.LoadingLocationCreate'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Core.Entities.LoadingLocationData.LoadingLocation'
  '/v1/products/locations/{id}':
    get:
      tags:
        - LoadingLocations
      summary: Get a specific loading location.
      description: "<p>\r\n            Gets a specific loading location.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Seller</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Loading Operator</li>\r\n    <li>Location Manager</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1ProductsLocationsByIdGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: id
          in: path
          description: The ID of the loading location.
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Core.Entities.LoadingLocationData.LoadingLocation'
    put:
      tags:
        - LoadingLocations
      summary: Update a loading location.
      description: "<p>\r\n            Updates a loading location.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1ProductsLocationsByIdPut
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: id
          in: path
          description: The ID of the loading location.
          required: true
          type: string
          format: uuid
        - name: dto
          in: body
          description: The body containing the details of the loading location.
          required: false
          schema:
            $ref: '#/definitions/LoadingLocation.LoadingLocationUpdate'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Core.Entities.LoadingLocationData.LoadingLocation'
    delete:
      tags:
        - LoadingLocations
      summary: Delete a loading location.
      description: "<p>\r\n            Deletes a loading location.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1ProductsLocationsByIdDelete
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: id
          in: path
          description: The ID of the loading location.
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            type: boolean
  /v1/products/locations/import:
    post:
      tags:
        - LoadingLocations
      summary: Create mutliple loading locations.
      description: "<p>\r\n            Creates multiple loading locations. Loading locations that already exist are simply skipped, as very\r\n            little can be configured. Provide a list of loading locations, including a unique reference other than\r\n            0 for each of them.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1ProductsLocationsImportPost
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: locations
          in: body
          description: A list of loading locations.
          required: false
          schema:
            type: array
            items:
              $ref: '#/definitions/LoadingLocation.LoadingLocationImport'
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/MasterData.BulkResult'
  '/v1/products/{productId}/loaders/{loaderId}/locations':
    get:
      tags:
        - LoadingLocations
      summary: Get all loading locations for a specific product/loader combination.
      operationId: V1ProductsByProductIdLoadersByLoaderIdLocationsGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: productId
          in: path
          description: The ID of the product.
          required: true
          type: string
          format: uuid
        - name: loaderId
          in: path
          description: the ID of the loader.
          required: true
          type: string
          format: uuid
        - name: page
          in: query
          description: The index of the page. Optional; defaults to 1.
          required: false
          type: integer
          format: int32
        - name: pageSize
          in: query
          description: RThe size of each page. Optional; defaults to 20.
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            $ref: >-
              #/definitions/Core.Abstraction.ResultsPage`1[[Nallian.eEcd.Api.Abstractions.LoadingLocation.LoadingLocationDto,
              Nallian.eEcd.Api.Abstractions, Version=1.0.0.0, Culture=neutral,
              PublicKeyToken=null]]
  /v1/products/locations/search:
    get:
      tags:
        - LoadingLocations
      summary: Search for loading locations.
      description: "<p>\r\n            Get all non-softdeleted permitted loading locations for a seller. Superadmins may provide an ID of\r\n            another seller, else the logged in organisation will be used. Optionally filter by product, loader,\r\n            or a combination of the two.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Loading Operator</li>\r\n    <li>Location Manager</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1ProductsLocationsSearchGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: sellerId
          in: query
          description: >-
            The ID of the seller. Optional; defaults to the logged in
            organisation.
          required: false
          type: string
          format: uuid
        - name: productId
          in: query
          description: The ID of the product to filter. Optional.
          required: false
          type: string
          format: uuid
        - name: loaderId
          in: query
          description: The ID of the loader to filter. Optional.
          required: false
          type: string
          format: uuid
        - name: page
          in: query
          description: The index of the page. Optional; defaults to 1.
          required: false
          type: integer
          format: int32
        - name: pageSize
          in: query
          description: The size of each page. Optional; defaults to 20;
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            $ref: >-
              #/definitions/Core.Abstraction.ResultsPage`1[[Nallian.eEcd.Api.Abstractions.LoadingLocation.LoadingLocationDto,
              Nallian.eEcd.Api.Abstractions, Version=1.0.0.0, Culture=neutral,
              PublicKeyToken=null]]
  '/v1/equipment/{equipmentId}/loads/assign':
    post:
      tags:
        - Loads
      summary: Assigns a load to a an equipment.
      description: "<p>\r\n            Assigns a load to a piece of equipment. A load must be planned for one or more compartments, and must\r\n            be planned in the future. An existing product must be given, as well as an existing licensed loader.\r\n            none of the selected compartments may already have a planned load. The load will contain a log entry to\r\n            indicate it being created.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n  </ul>\r\n</p>"
      operationId: V1EquipmentByEquipmentIdLoadsAssignPost
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: equipmentId
          in: path
          description: The ID of the equipment.
          required: true
          type: string
          format: uuid
        - name: load
          in: body
          description: The body containing the load information.
          required: false
          schema:
            $ref: '#/definitions/BookletData.LoadAssignment'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BookletData.Load'
        '400':
          description: Bad Request
  '/v1/equipment/{equipmentId}/loads/{loadId}':
    get:
      tags:
        - Loads
      summary: Get a specific load.
      description: "<p>\r\n            Gets a specific load of an equipment. Only equipment operators that own the equipment may request\r\n            the load, as well as loaders for which the load was designated.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n</p>"
      operationId: V1EquipmentByEquipmentIdLoadsByLoadIdGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: equipmentId
          in: path
          description: The ID of the equipment.
          required: true
          type: string
          format: uuid
        - name: loadId
          in: path
          description: The ID of the load.
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BookletData.Load'
    put:
      tags:
        - Loads
      summary: Update a planned load.
      description: "<p>\r\n            Updates a load, if the loader hasn't already accepted or rejected it. The same rules apply as if it\r\n            would be created; no compartments may have assigned loads already, and the product, seller and loader\r\n            must be licensed. The load will contain a log entry to indicate it being updated.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n  </ul>\r\n</p>"
      operationId: V1EquipmentByEquipmentIdLoadsByLoadIdPut
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: equipmentId
          in: path
          description: The ID of the equipment.
          required: true
          type: string
          format: uuid
        - name: loadId
          in: path
          description: The ID of the load.
          required: true
          type: string
          format: uuid
        - name: dto
          in: body
          description: The body containing the details of the load.
          required: false
          schema:
            $ref: '#/definitions/BookletData.LoadAssignment'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BookletData.Load'
        '400':
          description: Bad Request
  '/v1/equipment/{equipmentId}/loads/{loadId}/cancel':
    put:
      tags:
        - Loads
      summary: Cancels a planned load.
      description: "<p>\r\n            Cancels a load, if it is still planned. The load will contain a log entry to indicate it being\r\n            cancelled.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n  </ul>\r\n</p>"
      operationId: V1EquipmentByEquipmentIdLoadsByLoadIdCancelPut
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: equipmentId
          in: path
          description: The ID of the equipment.
          required: true
          type: string
          format: uuid
        - name: loadId
          in: path
          description: The ID of the load.
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BookletData.Load'
        '400':
          description: Bad Request
        '405':
          description: Method Not Allowed
  '/v1/equipment/{equipmentId}/loads/{loadId}/accept':
    put:
      tags:
        - Loads
      summary: Accept a load.
      description: "<p>\r\n            Accepts a planned load. If the load was planned without a specific product, it has to be given by the\r\n            loader. The load will contain a log entry to indicate it being accepted.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Loader</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n</p>"
      operationId: V1EquipmentByEquipmentIdLoadsByLoadIdAcceptPut
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: equipmentId
          in: path
          description: The ID of the equipment.
          required: true
          type: string
          format: uuid
        - name: loadId
          in: path
          description: The ID of the load.
          required: true
          type: string
          format: uuid
        - name: dto
          in: body
          description: "The body containing the ID of the product that needs to be loaded. Optional only if \r\n            despatcher did not specify a product."
          required: false
          schema:
            $ref: '#/definitions/BookletData.LoadAcceptation'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BookletData.Load'
        '400':
          description: Bad Request
        '405':
          description: Method Not Allowed
  '/v1/equipment/{equipmentId}/loads/{loadId}/move':
    put:
      tags:
        - Loads
      summary: Move a load from one equipment to another.
      description: "<p>\r\n            Moves a load from one equipment to another. Both equipments must be owned by the operator, and the\r\n            receiving equipment may not yet have any planned loads for any of the compartments of the moved load.\r\n            The load will contain a log entry to indicate it being moved.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n  </ul>\r\n</p>"
      operationId: V1EquipmentByEquipmentIdLoadsByLoadIdMovePut
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: equipmentId
          in: path
          description: The ID of the equipment.
          required: true
          type: string
          format: uuid
        - name: loadId
          in: path
          description: The ID of the load.
          required: true
          type: string
          format: uuid
        - name: dto
          in: body
          description: "The body containing the ID of the receiving equipment, as well as a comment to\r\n            specify the reason for moving."
          required: false
          schema:
            $ref: '#/definitions/BookletData.LoadMigration'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BookletData.Load'
        '400':
          description: Bad Request
  '/v1/equipment/{equipmentId}/loads/{loadId}/reject':
    put:
      tags:
        - Loads
      summary: Reject a planned load.
      description: "<p>\r\n            Rejects a planned load, if for whatever reason the loader decides not to continue performing the load.\r\n            The load will contain a log entry to indicate it being rejected, as well as a reason for the rejection.\r\n            A notification will be sent to the despatcher that requested the load.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Loader</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n</p>"
      operationId: V1EquipmentByEquipmentIdLoadsByLoadIdRejectPut
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: equipmentId
          in: path
          description: The ID of the equipment.
          required: true
          type: string
          format: uuid
        - name: loadId
          in: path
          description: The ID of the load.
          required: true
          type: string
          format: uuid
        - name: dto
          in: body
          description: The body containing the reason for the rejection.
          required: false
          schema:
            $ref: '#/definitions/BookletData.LoadRejection'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BookletData.Load'
        '400':
          description: Bad Request
        '405':
          description: Method Not Allowed
  '/v1/equipment/{equipmentId}/loads/{loadId}/complete':
    put:
      tags:
        - Loads
      summary: Complete a load.
      description: "<p>\r\n            Completes a load. When completing a load, the compartments that were actually loaded need to be \r\n            specified. These compartments need to be a subset of the compartments designated by the despatcher.\r\n            Upon completing a load, an EEcd credit will be spent from the loader's wallet. If no credits remain,\r\n            the load cannot be completed.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Loader</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n</p>"
      operationId: V1EquipmentByEquipmentIdLoadsByLoadIdCompletePut
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: equipmentId
          in: path
          description: The ID of the equipment.
          required: true
          type: string
          format: uuid
        - name: loadId
          in: path
          description: The ID of the load.
          required: true
          type: string
          format: uuid
        - name: dto
          in: body
          description: The body containing the loaded compartments.
          required: false
          schema:
            $ref: '#/definitions/BookletData.LoadCompletion'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BookletData.Load'
  '/v1/equipment/{equipmentId}/loads/assignunofficial':
    post:
      tags:
        - Loads
      summary: Add an non-registered load to an equipment.
      description: "<p>\r\n            If the previous load found in the booklet does not match with the load found in the equipment,\r\n            an non-registered load may be added. This non-registered load is far less detailed than normal loads,\r\n            and needs to be accompanied by proof justifying the need for an non-registered load. Please refer\r\n            to <b>/equipment/{equipmentId}/loads/{loadId}/attachments</b> to upload documents to the \r\n            non-registered load.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n</p>"
      operationId: V1EquipmentByEquipmentIdLoadsAssignunofficialPost
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: equipmentId
          in: path
          description: The ID of the equipment.
          required: true
          type: string
          format: uuid
        - name: dto
          in: body
          description: "The body containing details about the nonregistered load, including the product\r\n            name, compartments and a comment."
          required: false
          schema:
            $ref: '#/definitions/BookletData.NonregisteredLoad'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BookletData.Load'
  '/v1/equipment/{equipmentId}/loads/addnonregistered':
    post:
      tags:
        - Loads
      summary: Add an non-registered load to an equipment.
      description: "<p>\r\n            If the previous load found in the booklet does not match with the load found in the equipment,\r\n            an non-registered load may be added. This non-registered load is far less detailed than normal loads,\r\n            and needs to be accompanied by proof justifying the need for an non-registered load. Please refer\r\n            to <b>/equipment/{equipmentId}/loads/{loadId}/attachments</b> to upload documents to the \r\n            non-registered load.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n</p>"
      operationId: V1EquipmentByEquipmentIdLoadsAddnonregisteredPost
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: equipmentId
          in: path
          description: The ID of the equipment.
          required: true
          type: string
          format: uuid
        - name: dto
          in: body
          description: "The body containing details about the nonregistered load, including the product\r\n            name, compartments and a comment."
          required: false
          schema:
            $ref: '#/definitions/BookletData.NonregisteredLoad'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BookletData.Load'
  /v1/loads:
    get:
      tags:
        - Loads
      summary: Search active loads.
      description: "<p>\r\n            Get all loads for the logged in user. Optionally filter by transport reference\r\n            (customerReference) or equipment. Transport reference needs to exactly match, whereas the\r\n            equipmentsearch may be partial. Loads may be filtered by state as well. Completed loads will\r\n            never appear in this list.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Loader</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n</p>"
      operationId: V1LoadsGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: transportReference
          in: query
          description: "The customer reference to search for. Optional. If given, the\r\n            reference needs to be a complete match."
          required: false
          type: string
        - name: search
          in: query
          description: "A search string to find specific equipment, by either license plate or container\r\n            ID. Optional. If given, it needs to be at least 2 characters long. Spaces and special characters are filtered\r\n            from the search string."
          required: false
          type: string
        - name: page
          in: query
          description: The index of the page. Optional; defaults to 1.
          required: false
          type: integer
          format: int32
        - name: pageSize
          in: query
          description: The size of each page. Optiona; defaults to 20.
          required: false
          type: integer
          format: int32
        - name: dateStart
          in: query
          description: >-
            The first date that is taken into account when searching. Optional;
            defaults to 7 days ago.
          required: false
          type: string
          format: date-time
        - name: dateEnd
          in: query
          description: >-
            The latest date that is taken into account when searching. Optional;
            defaults to now.
          required: false
          type: string
          format: date-time
        - name: status
          in: query
          description: "The status of loads that may appear in the list. Optional. If not given, all\r\n            loads other than completed loads will appear in the list."
          required: false
          type: string
          enum:
            - PLANNED
            - ACCEPTED
            - COMPLETED
            - REJECTED
            - CANCELLED
            - NONREGISTERED
            - MOVED
            - UPDATED
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: >-
                #/definitions/Core.Abstraction.ResultsPage`1[[Nallian.eEcd.Api.Abstractions.BookletData.LoadSummary,
                Nallian.eEcd.Api.Abstractions, Version=1.0.0.0, Culture=neutral,
                PublicKeyToken=null]]
        '204':
          description: Success
  '/v1/equipment/{equipmentId}/loads/{loadId}/unofficialproof':
    post:
      tags:
        - Loads
      summary: Upload a document to an non-registeredproof load.
      description: "<p>\r\n            Uploads a document to an non-registeredproof load, to serve as proof. This could be a CMR, or any other type of\r\n            document that justifies the creation of the non-registeredproof load. A maximum of 5 documents per load is\r\n            allowed.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n</p>"
      operationId: V1EquipmentByEquipmentIdLoadsByLoadIdUnofficialproofPost
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: equipmentId
          in: path
          description: The ID of the equipment.
          required: true
          type: string
          format: uuid
        - name: loadId
          in: path
          description: The ID of the load.
          required: true
          type: string
          format: uuid
        - name: ContentType
          in: formData
          required: false
          type: string
        - name: ContentDisposition
          in: formData
          required: false
          type: string
        - name: Headers
          in: formData
          required: false
          type: object
        - name: Length
          in: formData
          required: false
          type: integer
          format: int64
        - name: Name
          in: formData
          required: false
          type: string
        - name: FileName
          in: formData
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              type: array
              items:
                $ref: '#/definitions/BookletData.LoadSummary'
  '/v1/equipment/{equipmentId}/loads/{loadId}/attachments':
    post:
      tags:
        - Loads
      summary: Upload a document to an non-registeredproof load.
      description: "<p>\r\n            Uploads a document to an non-registeredproof load, to serve as proof. This could be a CMR, or any other type of\r\n            document that justifies the creation of the non-registeredproof load. A maximum of 5 documents per load is\r\n            allowed.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n</p>"
      operationId: V1EquipmentByEquipmentIdLoadsByLoadIdAttachmentsPost
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: equipmentId
          in: path
          description: The ID of the equipment.
          required: true
          type: string
          format: uuid
        - name: loadId
          in: path
          description: The ID of the load.
          required: true
          type: string
          format: uuid
        - name: ContentType
          in: formData
          required: false
          type: string
        - name: ContentDisposition
          in: formData
          required: false
          type: string
        - name: Headers
          in: formData
          required: false
          type: object
        - name: Length
          in: formData
          required: false
          type: integer
          format: int64
        - name: Name
          in: formData
          required: false
          type: string
        - name: FileName
          in: formData
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              type: array
              items:
                $ref: '#/definitions/BookletData.LoadSummary'
  '/v1/equipment/{equipmentId}/loads/{loadId}/unofficialproof/{attachmentId}':
    get:
      tags:
        - Loads
      summary: Download a document from an non-registeredproof load.
      description: "<p>\r\n            Offers a document attached to an non-registeredproof load as a downloadable file.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n</p>"
      operationId: V1EquipmentByEquipmentIdLoadsByLoadIdUnofficialproofByAttachmentIdGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: equipmentId
          in: path
          description: The ID of the equipment.
          required: true
          type: string
          format: uuid
        - name: loadId
          in: path
          description: The ID of the load.
          required: true
          type: string
          format: uuid
        - name: attachmentId
          in: path
          description: The ID of the attached document.
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Models.FileResponse'
  '/v1/equipment/{equipmentId}/loads/{loadId}/attachments/{attachmentId}':
    get:
      tags:
        - Loads
      summary: Download a document from an non-registeredproof load.
      description: "<p>\r\n            Offers a document attached to an non-registeredproof load as a downloadable file.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n</p>"
      operationId: V1EquipmentByEquipmentIdLoadsByLoadIdAttachmentsByAttachmentIdGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: equipmentId
          in: path
          description: The ID of the equipment.
          required: true
          type: string
          format: uuid
        - name: loadId
          in: path
          description: The ID of the load.
          required: true
          type: string
          format: uuid
        - name: attachmentId
          in: path
          description: The ID of the attached document.
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Models.FileResponse'
  /v1/lookups/languages:
    get:
      tags:
        - Lookups
      summary: Get a list of supported languages and their IDs.
      description: "<p>\r\n            Gets a list of languages, ordered by their English name. When creating a user, a language ID needs\r\n            to be provided. Use this call to have a user select one.\r\n                </p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Eecd Provisioning Admin</li>\r\n  </ul>\r\n</p>"
      operationId: V1LookupsLanguagesGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Users.Output.User'
  /v1/lookups/timezones:
    get:
      tags:
        - Lookups
      summary: Get a list of supported time zones and their IDs.
      description: "<p>\r\n            Gets a list of time zones, ordered by their English name. When creating a user, a time zone ID needs\r\n            to be provided. Use this call to have a user select one.\r\n                </p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Eecd Provisioning Admin</li>\r\n  </ul>\r\n</p>"
      operationId: V1LookupsTimezonesGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: sortBy
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Users.Output.User'
  /v1/organisations:
    get:
      tags:
        - Organisations
      summary: Get all organisations within the community.
      description: "<p>\r\n            Get all organisation that have subscribed to the EEcd community. The results are packed into a\r\n            container with information about the amount of pages.\r\n                </p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n    <li>Eecd Provisioning Admin</li>\r\n  </ul>\r\n</p>"
      operationId: V1OrganisationsGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: page
          in: query
          description: The index of the page. Optional; defaults to 1.
          required: false
          type: integer
          format: int32
        - name: pageSize
          in: query
          description: The size of each page. Optional; defaults to 20.
          required: false
          type: integer
          format: int32
        - name: includeDetails
          in: query
          description: "Whether or not to include details per organisation. Optional; defaults to\r\n            false. Take note; setting this to true makes the method a lot slower."
          required: false
          type: boolean
      responses:
        '200':
          description: Success
          schema:
            $ref: >-
              #/definitions/Core.Abstraction.ResultsPage`1[[Nallian.eEcd.Api.Abstractions.Organisations.Output.Organisation,
              Nallian.eEcd.Api.Abstractions, Version=1.0.0.0, Culture=neutral,
              PublicKeyToken=null]]
    post:
      tags:
        - Organisations
      summary: Create an organisation.
      description: "<p>\r\n            Creates an organisation on the Nallian platform. Choose country code 52 for Belgium.\r\n                </p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Eecd Provisioning Admin</li>\r\n  </ul>\r\n</p>"
      operationId: V1OrganisationsPost
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: dto
          in: body
          description: The body containing the organisation details.
          required: false
          schema:
            $ref: '#/definitions/Organisations.Input.OrganisationCreate'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Organisations.Output.Organisation'
  '/v1/organisations/{organisationId}':
    get:
      tags:
        - Organisations
      summary: Get details of an organisation.
      description: "<p>\r\n            Get detailed information about an organisation within the EEcd community. Details include contact\r\n            information, as well as VAT, DUNS and EORI codes.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Seller</li>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Community Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Eecd Provisioning Admin</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Location Manager</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1OrganisationsByOrganisationIdGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: organisationId
          in: path
          description: The ID of the organisation.
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Organisations.Output.Organisation'
    put:
      tags:
        - Organisations
      summary: Update details of an organisation.
      description: "<p>\r\n            Update details such as contact information and VAT/DUNS/EORI codes.\r\n                </p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Eecd Provisioning Admin</li>\r\n  </ul>\r\n</p>"
      operationId: V1OrganisationsByOrganisationIdPut
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: organisationId
          in: path
          description: The ID of the organisation.
          required: true
          type: string
          format: uuid
        - name: dto
          in: body
          description: The body containing the updated details of the organisation.
          required: false
          schema:
            $ref: '#/definitions/Organisations.Input.OrganisationUpdate'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Organisations.Output.Organisation'
  /v1/organisations/roles:
    get:
      tags:
        - Organisations
      summary: Get available organisation roles.
      description: "<p>\r\n            Get a list of roles that can be assigned to an organisation. Because organisations may specify\r\n            these roles themselves, no security context is attached to these roles. They will however help\r\n            the community admin when creating the licenses.\r\n                </p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Eecd Provisioning Admin</li>\r\n  </ul>\r\n</p>"
      operationId: V1OrganisationsRolesGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Organisations.Output.OrganisationRole'
  /v1/organisations/loggedonorganisation:
    get:
      tags:
        - Organisations
      summary: Get details of the logged in user's organisation.
      description: "<p>\r\n            Get the contact details and VAT/DUNS/EORI codes of the logged in user's organisation.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Seller</li>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Community Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Location Manager</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1OrganisationsLoggedonorganisationGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Organisations.Output.Organisation'
  '/v1/organisations/{organisationId}/roles':
    get:
      tags:
        - Organisations
      summary: Get all roles assigned to an organisation.
      description: "<p>\r\n            Gets a list of all organisation roles that have been assigned to an organisation. These roles are\r\n            purely informative, and do not bear any meaning with regards to security.\r\n                </p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n    <li>Eecd Provisioning Admin</li>\r\n  </ul>\r\n</p>"
      operationId: V1OrganisationsByOrganisationIdRolesGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: organisationId
          in: path
          description: The ID of the organisation.
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Users.Output.UserRole'
  '/v1/organisations/{type}/{code}':
    get:
      tags:
        - Organisations
      summary: Search for an organisation by a unique code.
      description: "<p>\r\n            Search for an organisation based on its DUNS, VAT or EORI code. Only returns an organisation if\r\n            it exists, and is a member of the EEcd community.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Seller</li>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Community Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Loading Operator</li>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1OrganisationsByTypeByCodeGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: type
          in: path
          description: 'The type of code: DUNS, VAT or EORI.'
          required: true
          type: string
          enum:
            - Nallian
            - Ean
            - Duns
            - Vat
            - Scac
            - Seagha
            - Alias
            - AS2
            - SenderIdentifier
            - IATA
            - GoodsAccountabilityPartyCode
            - BIC
            - Eori
            - NxtPortEntityId
        - name: code
          in: path
          description: The actual code.
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Organisations.Output.Organisation'
  '/v1/organisations/{organisationId}/users/roles':
    get:
      tags:
        - Organisations
      summary: Get all user roles available to an organisation.
      description: "<p>\r\n            Get a list of all authorization roles that an organisation can give to a user. This list is\r\n            constructed based on the organisation's license, and contains no duplicates. The list is\r\n            ordered by role name. These roles determine which actions the user is or is not allowed to \r\n            perform.\r\n                </p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Eecd Provisioning Admin</li>\r\n  </ul>\r\n</p>"
      operationId: V1OrganisationsByOrganisationIdUsersRolesGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: organisationId
          in: path
          description: The ID of the organisation.
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Users.Output.UserRole'
  /v1/products:
    get:
      tags:
        - Products
      summary: Search for one or more products.
      description: "<p>\r\n            Gets a list of all products that satisfy the search conditions. You'll need to know the\r\n            seller, and at least part of the name of the product in order to search. \r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n</p>"
      operationId: V1ProductsGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: sellerId
          in: query
          description: the ID of the seller.
          required: false
          type: string
          format: uuid
        - name: search
          in: query
          description: "(Part of) the name of the product. Needs to be at least 2 characters\r\n            long."
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/MasterData.Product'
        '204':
          description: Success
    post:
      tags:
        - Products
      summary: Create a new product.
      description: "<p>\r\n            Creates a new product. Its article number and UN number must be unique in the database. \r\n            If the article number or UN number already exist, it assumed that the product needs to\r\n            be updated.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1ProductsPost
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: dto
          in: body
          description: the body containing the product details.
          required: false
          schema:
            $ref: '#/definitions/MasterData.Product'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MasterData.Product'
        '400':
          description: Bad Request
  '/v1/products/{id}':
    put:
      tags:
        - Products
      summary: Update a product.
      description: "<p>\r\n            Updates a product.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1ProductsByIdPut
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: id
          in: path
          description: The ID of the product.
          required: true
          type: string
          format: uuid
        - name: dto
          in: body
          description: Theb ody containing the updated product details.
          required: false
          schema:
            $ref: '#/definitions/MasterData.Product'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MasterData.Product'
        '400':
          description: Bad Request
    delete:
      tags:
        - Products
      summary: Delete a product.
      description: "<p>\r\n            Deletes a product.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1ProductsByIdDelete
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: id
          in: path
          description: The ID of the product.
          required: true
          type: string
          format: uuid
      responses:
        '203':
          description: Success
          schema:
            type: boolean
  /v1/products/import:
    post:
      tags:
        - Products
      summary: Create or update multiple products.
      description: "<p>\r\n            Create or update a list of products. The list has to adhere to a few rules:\r\n                    <ul><li>It may not be longer than 200 records;</li><li>Every record must have a unique reference greater than 0;</li></ul>\r\n            Products that are already known get updated, whereas new products gets created. An overview\r\n            of all modifications is returned per reference.\r\n                </p>\r\n<p>\r\n  <code><pre>\r\n             [\r\n                     {\r\n                         \"ref\": 1,\r\n                         \"id\": \"08d5cc76-7dd3-d1ca-4f4b-e1aa5afb5a4e\",\r\n                         \"success\": true,\r\n                         \"validationErrors\": [],\r\n                         \"errorMessage\": \"\"\r\n                    },\r\n                    {\r\n                        \"ref\": 2,\r\n                        \"success\": false,\r\n                        \"validationErrors\": [\r\n                        {\r\n                            \"key\": \"ArticleName\",\r\n                            \"errors\": [\r\n                                \"The article name may not be empty.\"\r\n                            ]\r\n                        }\r\n                    ],\r\n                    \"errorMessage\": \"The article name may not be empty.\"\r\n                }\r\n            ]\r\n                    </pre></code>\r\n</p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1ProductsImportPost
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: dto
          in: body
          description: The list of products to be imported.
          required: false
          schema:
            type: array
            items:
              $ref: '#/definitions/MasterData.ProductImport'
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/MasterData.BulkResult'
        '400':
          description: Bad Request
  /v1/products/bulk:
    delete:
      tags:
        - Products
      summary: Delete multiple products.
      description: "<p>\r\n            Deletes multiple products. Very similar to import, with the difference that any product that\r\n            is found, gets deleted.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1ProductsBulkDelete
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: dto
          in: body
          description: The list of products that need to be deleted.
          required: false
          schema:
            type: array
            items:
              $ref: '#/definitions/MasterData.ProductDelete'
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/MasterData.BulkResult'
        '400':
          description: Bad Request
  '/v1/products/{productId}/sds':
    get:
      tags:
        - Products
      summary: Download the SDS document.
      description: "<p>\r\n            Download the SDS file in the requested language, if it's available.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Seller</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1ProductsByProductIdSdsGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: productId
          in: path
          description: The ID of the product.
          required: true
          type: string
          format: uuid
        - name: lang
          in: query
          description: The language of the SDS information.
          required: false
          type: string
          enum:
            - NL
            - EN
            - FR
            - DE
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Models.FileResponse'
    put:
      tags:
        - Products
      summary: Update the SDS information.
      description: "<p>\r\n            Update the SDS information of a product.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1ProductsByProductIdSdsPut
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: productId
          in: path
          description: The ID of the product.
          required: true
          type: string
          format: uuid
        - name: dto
          in: body
          description: The body containing the SDS details.
          required: false
          schema:
            $ref: '#/definitions/MasterData.Sds'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MasterData.Sds'
    delete:
      tags:
        - Products
      summary: 'Delete an SDS, whether it''s a link or a file.'
      description: "<p>\r\n            Deletes an SDS info record for a given language from a product. If the info was a link, it is\r\n            just removed; if the info indicates that the SDS was a file, the file is made inaccessible. \r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1ProductsByProductIdSdsDelete
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: productId
          in: path
          description: The ID of the product.
          required: true
          type: string
          format: uuid
        - name: lang
          in: query
          description: The language of the SDS that needs to be removed.
          required: false
          type: string
          enum:
            - NL
            - EN
            - FR
            - DE
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MasterData.Product'
  /v1/products/sds/import:
    post:
      tags:
        - Products
      summary: Import multiple SDS definitions.
      description: "<p>\r\n            Import one or more SDS definitions. Refer to import products for more information on the\r\n            bulk import process.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1ProductsSdsImportPost
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: dto
          in: body
          description: The body containing the SDS definitions.
          required: false
          schema:
            type: array
            items:
              $ref: '#/definitions/MasterData.SdsImport'
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/MasterData.BulkResult'
  '/v1/products/{productId}/sds/{language}/blob':
    put:
      tags:
        - Products
      summary: Upload an SDS file by product ID.
      description: "<p>\r\n            Overwrites an SDS document on the server with a new one. Use this method if the product ID is\r\n            known.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1ProductsByProductIdSdsByLanguageBlobPut
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: productId
          in: path
          description: The ID of the product.
          required: true
          type: string
          format: uuid
        - name: language
          in: path
          description: "The language of the contents of the file. Either NL, EN, FR or\r\n            DE."
          required: true
          type: string
          enum:
            - NL
            - EN
            - FR
            - DE
        - name: ContentType
          in: formData
          required: false
          type: string
        - name: ContentDisposition
          in: formData
          required: false
          type: string
        - name: Headers
          in: formData
          required: false
          type: object
        - name: Length
          in: formData
          required: false
          type: integer
          format: int64
        - name: Name
          in: formData
          required: false
          type: string
        - name: FileName
          in: formData
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MasterData.UploadSdsDocumentResult'
  '/v1/products/sds/{uniqueReference}/{language}/blob':
    put:
      tags:
        - Products
      summary: Upload an SDS file by reference.
      description: "<p>\r\n            Overwrites an SDS document on the server with a new one. Use this method if the product ID is\r\n            not known.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1ProductsSdsByUniqueReferenceByLanguageBlobPut
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: uniqueReference
          in: path
          description: "The unique internal reference that was specified when creating\r\n            the product."
          required: true
          type: string
        - name: language
          in: path
          description: "The language of the contents of the file. Either NL, EN, FR or\r\n            DE."
          required: true
          type: string
          enum:
            - NL
            - EN
            - FR
            - DE
        - name: ContentType
          in: formData
          required: false
          type: string
        - name: ContentDisposition
          in: formData
          required: false
          type: string
        - name: Headers
          in: formData
          required: false
          type: object
        - name: Length
          in: formData
          required: false
          type: integer
          format: int64
        - name: Name
          in: formData
          required: false
          type: string
        - name: FileName
          in: formData
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MasterData.UploadSdsDocumentResult'
  '/v1/products/{productId}':
    get:
      tags:
        - Products
      summary: Get a product.
      description: "<p>\r\n            Gets a single product from the database.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1ProductsByProductIdGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: productId
          in: path
          description: The ID of the product.
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MasterData.Product'
  '/v1/products/{productId}/sds/info':
    get:
      tags:
        - Products
      summary: Get an overview of all available SDS info.
      description: "<p>\r\n            Gets a list of the available SDS files or -links that can be obtained for the product.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Seller</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1ProductsByProductIdSdsInfoGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: productId
          in: path
          description: The ID of the product.
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/MasterData.SdsInfo'
  /v1/users:
    post:
      tags:
        - Users
      summary: Create a user within the EEcd community.
      description: "<p>\r\n            Provide a more detailed description of the method.\r\n                </p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Eecd Provisioning Admin</li>\r\n  </ul>\r\n</p>"
      operationId: V1UsersPost
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: dto
          in: body
          description: "The body containing the user details. Details include the preferred language\r\n            of the user (defaults to English), as well as the list of authorization roles that grant or\r\n            deny access to parts of the application."
          required: false
          schema:
            $ref: '#/definitions/Users.Input.UserCreate'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Users.Output.User'
  '/v1/users/{userid}':
    get:
      tags:
        - Users
      summary: Get a user.
      description: "<p>\r\n            Gets a user, if it is part of an organisation within the EEcd community. \r\n                </p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Community Admin</li>\r\n    <li>Eecd Provisioning Admin</li>\r\n  </ul>\r\n</p>"
      operationId: V1UsersByUseridGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: userid
          in: path
          description: The ID of the user.
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Users.Output.User'
    put:
      tags:
        - Users
      summary: Update a user.
      description: "<p>\r\n            Updates a specific user, if it is part of an organisation within the EEcd community.\r\n                </p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Eecd Provisioning Admin</li>\r\n  </ul>\r\n</p>"
      operationId: V1UsersByUseridPut
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: userId
          in: path
          description: The ID of the user.
          required: true
          type: string
          format: uuid
        - name: dto
          in: body
          description: The updated details of the user.
          required: false
          schema:
            $ref: '#/definitions/Users.Input.UserUpdate'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Users.Output.User'
    delete:
      tags:
        - Users
      summary: Delete a user.
      description: "<p>\r\n             Currently not available to public. \r\n                </p>"
      operationId: V1UsersByUseridDelete
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: userid
          in: path
          description: The ID of the user.
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            type: boolean
  /v1/users/roles:
    get:
      tags:
        - Users
      summary: Get a list of available authentication roles.
      description: "<p>\r\n            Gets a list of all roles that can be assigned to users. This list does not take licenses or\r\n            organisation roles into account; this simply is a list of all roles that the application\r\n            supports.\r\n                </p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Eecd Provisioning Admin</li>\r\n  </ul>\r\n</p>"
      operationId: V1UsersRolesGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Users.Output.UserRole'
  '/v1/users/{userId}/roles':
    get:
      tags:
        - Users
      summary: Get all authorization roles of a user.
      description: "<p>\r\n             Gets a list of roles that have been assigned to a user, if that user is a member of an\r\n            organisation in the EEcd community.\r\n                </p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Community Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Eecd Provisioning Admin</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Location Manager</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n</p>"
      operationId: V1UsersByUserIdRolesGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: userId
          in: path
          description: The ID of the user.
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Users.Output.UserRole'
    put:
      tags:
        - Users
      summary: Update a user's authorization roles.
      description: "<p>\r\n            Update the list of authorization roles to which a user has access.\r\n                </p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Eecd Provisioning Admin</li>\r\n  </ul>\r\n</p>"
      operationId: V1UsersByUserIdRolesPut
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: userId
          in: path
          description: The ID of the user.
          required: true
          type: string
          format: uuid
        - name: dto
          in: body
          description: The updated list of authrozation roles.
          required: false
          schema:
            $ref: '#/definitions/Users.Input.UserRoleUpdate'
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Users.Output.UserRole'
  '/v1/organisations/{organisationId}/users':
    get:
      tags:
        - Users
      summary: Get all users within an organisation.
      description: "<p>\r\n            Gets a paged list of all users of an organisation, if that organisation is a member of the\r\n            EECD community. \r\n                </p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Eecd Provisioning Admin</li>\r\n  </ul>\r\n</p>"
      operationId: V1OrganisationsByOrganisationIdUsersGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - name: organisationId
          in: path
          description: The ID of the organisation.
          required: true
          type: string
          format: uuid
        - name: page
          in: query
          description: The index of the page. Optional; defaults to 1.
          required: false
          type: integer
          format: int32
        - name: pageSize
          in: query
          description: The size of the page; defaults to 20.
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Users.Output.User'
  /v1/users/loggedonuser:
    get:
      tags:
        - Users
      summary: Get the details of the logged in user.
      description: "<p>\r\n            Gets the details of the currently logged in user. Details include , including the user roles,\r\n            organisation name and license.\r\n                </p>\r\n<p>\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Seller</li>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Location Manager</li>\r\n    <li>Product Manager</li>\r\n    <li>Viewer</li>\r\n  </ul>\r\n</p>"
      operationId: V1UsersLoggedonuserGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Users.Output.User'
definitions:
  BookletData.EquipmentHistory:
    type: object
    properties:
      equipmentId:
        format: uuid
        type: string
      compartments:
        type: array
        items:
          $ref: '#/definitions/BookletData.CompartmentHistory'
  BookletData.CompartmentHistory:
    type: object
    properties:
      key:
        type: string
      cleanings:
        type: array
        items:
          $ref: '#/definitions/BookletData.HistoricalCleaning'
      loads:
        type: array
        items:
          $ref: '#/definitions/BookletData.HistoricalLoad'
  BookletData.HistoricalCleaning:
    type: object
    properties:
      cleaning:
        $ref: '#/definitions/BookletData.CleaningInfo'
      valid:
        type: boolean
      previousLoad:
        $ref: '#/definitions/BookletData.Product'
      comments:
        type: array
        items:
          $ref: '#/definitions/BookletData.PostSignoffComment'
      id:
        format: uuid
        type: string
      lastStatusDate:
        format: date-time
        type: string
      status:
        enum:
          - PLANNED
          - COMPLETED
          - SIGNEDOFF
          - CANCELLED
        type: string
      cleanedBy:
        $ref: '#/definitions/BookletData.LocationData'
      references:
        $ref: '#/definitions/BookletData.Reference'
      process:
        $ref: '#/definitions/BookletData.CleaningProcess'
      signoff:
        $ref: '#/definitions/BookletData.CleaningSignoff'
      eEcd:
        $ref: '#/definitions/BookletData.EEcd'
      attachments:
        type: array
        items:
          $ref: '#/definitions/BookletData.Attachment'
      cleanerComments:
        type: string
      type:
        enum:
          - STANDARD
          - POLYMER
        type: string
      isUnaccompanied:
        type: boolean
  BookletData.HistoricalLoad:
    type: object
    properties:
      id:
        format: uuid
        type: string
      lastStatusDate:
        format: date-time
        type: string
      status:
        enum:
          - PLANNED
          - ACCEPTED
          - COMPLETED
          - REJECTED
          - CANCELLED
          - NONREGISTERED
          - MOVED
          - UPDATED
        type: string
      product:
        $ref: '#/definitions/BookletData.Product'
      loadDetails:
        $ref: '#/definitions/BookletData.LoadDetail'
      loadProcessStates:
        type: array
        items:
          $ref: '#/definitions/BookletData.LoadProcessState'
      customerReference:
        type: string
      attachments:
        type: array
        items:
          $ref: '#/definitions/BookletData.Attachment'
  BookletData.CleaningInfo:
    type: object
    properties:
      codes:
        type: array
        items:
          type: string
      additional:
        type: string
      commentsPerCode:
        type: object
        additionalProperties:
          type: string
  BookletData.Product:
    type: object
    properties:
      productId:
        format: uuid
        type: string
      sellerId:
        format: uuid
        type: string
      sellerName:
        type: string
      productType:
        enum:
          - CHEMICAL
          - FOOD
          - FEED
          - PHARMA
        type: string
      articleNumber:
        type: string
      articleName:
        type: string
      unNr:
        type: string
  BookletData.PostSignoffComment:
    type: object
    properties:
      comment:
        type: string
      createdById:
        format: uuid
        type: string
      createdBy:
        type: string
      createdOn:
        format: date-time
        type: string
  BookletData.LocationData:
    type: object
    properties:
      locationId:
        format: uuid
        type: string
      locationName:
        type: string
      organisationId:
        format: uuid
        type: string
      organisationName:
        type: string
      addressLines:
        type: object
        additionalProperties:
          type: string
      phone:
        type: string
      fax:
        type: string
      website:
        type: string
  BookletData.Reference:
    type: object
    properties:
      customerReference:
        type: string
      internalReference:
        type: string
  BookletData.CleaningProcess:
    type: object
    properties:
      startedAt:
        format: date-time
        type: string
      endedAt:
        format: date-time
        type: string
      representativeName:
        type: string
      createdBy:
        type: string
      createdById:
        format: uuid
        type: string
      createdAt:
        format: date-time
        type: string
      cleaningPerformedBy:
        type: string
  BookletData.CleaningSignoff:
    type: object
    properties:
      driverName:
        type: string
      signature:
        type: string
      signedAt:
        format: date-time
        type: string
      driverComments:
        type: string
  BookletData.EEcd:
    type: object
    properties:
      reference:
        type: string
      valid:
        type: boolean
      expired:
        type: boolean
  BookletData.Attachment:
    type: object
    properties:
      id:
        format: uuid
        type: string
      originalFilename:
        type: string
  BookletData.LoadDetail:
    type: object
    properties:
      loadPlannedAt:
        format: date-time
        type: string
      loaderId:
        format: uuid
        type: string
      loaderName:
        type: string
      loadingLocation:
        type: string
  BookletData.LoadProcessState:
    type: object
    properties:
      status:
        enum:
          - PLANNED
          - ACCEPTED
          - COMPLETED
          - REJECTED
          - CANCELLED
          - NONREGISTERED
          - MOVED
          - UPDATED
        type: string
      fullName:
        type: string
      userId:
        format: uuid
        type: string
      timeStamp:
        format: date-time
        type: string
      comment:
        type: string
  CleaningLocation.CleaningLocationCreate:
    type: object
    properties:
      dunsCode:
        type: string
      name:
        type: string
      description:
        type: string
      addressLines:
        type: object
        additionalProperties:
          type: string
      phone:
        type: string
      fax:
        type: string
      website:
        type: string
  Core.Entities.CleaningLocation:
    type: object
    properties:
      organisationId:
        format: uuid
        type: string
      dunsCode:
        type: string
      name:
        type: string
      description:
        type: string
      phone:
        type: string
      fax:
        type: string
      website:
        type: string
      addressLines:
        type: object
        additionalProperties:
          type: string
      people:
        type: array
        items:
          $ref: >-
            #/definitions/Core.Entities.CleaningLocationData.CleaningLocationUser
      id:
        format: uuid
        type: string
      createdOn:
        format: date-time
        type: string
      createdByUser:
        format: uuid
        type: string
      lastUpdatedOn:
        format: date-time
        type: string
      lastUpdatedByUser:
        format: uuid
        type: string
      isDeleted:
        type: boolean
      version:
        format: uuid
        type: string
  Core.Entities.CleaningLocationData.CleaningLocationUser:
    type: object
    properties:
      id:
        format: uuid
        type: string
      fullName:
        type: string
  CleaningLocation.CleaningLocationUpdate:
    type: object
    properties:
      dunsCode:
        type: string
      name:
        type: string
      description:
        type: string
      addressLines:
        type: object
        additionalProperties:
          type: string
      phone:
        type: string
      fax:
        type: string
      website:
        type: string
  BookletData.CleaningActionCreate:
    type: object
    properties:
      locationId:
        format: uuid
        type: string
      type:
        enum:
          - STANDARD
          - POLYMER
        type: string
      isUnaccompanied:
        type: boolean
  BookletData.CleaningAction:
    type: object
    properties:
      equipmentId:
        format: uuid
        type: string
      comments:
        type: array
        items:
          $ref: '#/definitions/BookletData.PostSignoffComment'
      compartments:
        type: array
        items:
          $ref: '#/definitions/BookletData.CompartmentCleaning'
      id:
        format: uuid
        type: string
      lastStatusDate:
        format: date-time
        type: string
      status:
        enum:
          - PLANNED
          - COMPLETED
          - SIGNEDOFF
          - CANCELLED
        type: string
      cleanedBy:
        $ref: '#/definitions/BookletData.LocationData'
      references:
        $ref: '#/definitions/BookletData.Reference'
      process:
        $ref: '#/definitions/BookletData.CleaningProcess'
      signoff:
        $ref: '#/definitions/BookletData.CleaningSignoff'
      eEcd:
        $ref: '#/definitions/BookletData.EEcd'
      attachments:
        type: array
        items:
          $ref: '#/definitions/BookletData.Attachment'
      cleanerComments:
        type: string
      type:
        enum:
          - STANDARD
          - POLYMER
        type: string
      isUnaccompanied:
        type: boolean
  BookletData.CompartmentCleaning:
    type: object
    properties:
      key:
        type: string
      cleaning:
        $ref: '#/definitions/BookletData.CleaningInfo'
      previousLoad:
        $ref: '#/definitions/BookletData.Product'
      valid:
        type: boolean
      isPolymerComplete:
        type: boolean
  BookletData.CleaningUpdate:
    required:
      - compartments
      - references
      - process
    type: object
    properties:
      compartments:
        type: array
        items:
          $ref: '#/definitions/BookletData.CompartmentCleaning'
      references:
        $ref: '#/definitions/BookletData.Reference'
      process:
        $ref: '#/definitions/BookletData.CleaningProcess'
      cleanerComments:
        type: string
  BookletData.SignOffCleaning:
    required:
      - driverName
      - signature
    type: object
    properties:
      driverName:
        type: string
      signature:
        type: string
      driverComments:
        type: string
  Models.FileResponse:
    type: object
    properties:
      fileName:
        type: string
      data:
        format: byte
        type: string
      contentType:
        type: string
  Core.Entities.CreditData.CreditPack:
    type: object
    properties:
      initialAmount:
        format: int32
        type: integer
      currentAmount:
        format: int32
        type: integer
      transactions:
        type: array
        items:
          $ref: '#/definitions/Core.Entities.CreditData.CreditTransaction'
      organisationId:
        format: uuid
        type: string
      walletId:
        format: uuid
        type: string
      id:
        format: uuid
        type: string
      createdOn:
        format: date-time
        type: string
      createdByUser:
        format: uuid
        type: string
      lastUpdatedOn:
        format: date-time
        type: string
      lastUpdatedByUser:
        format: uuid
        type: string
      isDeleted:
        type: boolean
      version:
        format: uuid
        type: string
  Core.Entities.CreditData.CreditTransaction:
    type: object
    properties:
      id:
        format: uuid
        type: string
      performedOn:
        format: date-time
        type: string
      performedBy:
        format: uuid
        type: string
      amount:
        format: int32
        type: integer
      details:
        $ref: '#/definitions/Core.Entities.CreditData.CreditTransactionContext'
  Core.Entities.CreditData.CreditTransactionContext:
    type: object
    properties:
      reason:
        enum:
          - AddedCredits
          - CompleteLoad
          - CreateEecd
          - SignOffCleaning
        type: string
      bookletId:
        format: uuid
        type: string
      eEcd:
        type: string
      comment:
        type: string
  CreditData.CreditWalletSummary:
    type: object
    properties:
      id:
        format: uuid
        type: string
      lastUpdatedOn:
        format: date-time
        type: string
      owners:
        type: array
        items:
          format: uuid
          type: string
      warningThreshold:
        format: int32
        type: integer
      credits:
        $ref: '#/definitions/CreditData.CreditSummary'
      creditPacks:
        $ref: '#/definitions/CreditData.CreditPackOveralSummary'
  CreditData.CreditSummary:
    type: object
    properties:
      purchased:
        format: int32
        type: integer
      remaining:
        format: int32
        type: integer
      spent:
        format: int32
        type: integer
  CreditData.CreditPackOveralSummary:
    type: object
    properties:
      depleted:
        format: int32
        type: integer
      inUse:
        format: int32
        type: integer
      untouched:
        format: int32
        type: integer
      details:
        type: array
        items:
          $ref: '#/definitions/CreditData.CreditPackSummary'
  CreditData.CreditPackSummary:
    type: object
    properties:
      id:
        format: uuid
        type: string
      createdOn:
        format: date-time
        type: string
      lastUpdatedOn:
        format: date-time
        type: string
      remainingCredits:
        format: int32
        type: integer
      initialCredits:
        format: int32
        type: integer
  Core.Entities.CreditData.CreditWallet:
    type: object
    properties:
      owners:
        type: array
        items:
          format: uuid
          type: string
      warningThreshold:
        format: int32
        type: integer
      id:
        format: uuid
        type: string
      createdOn:
        format: date-time
        type: string
      createdByUser:
        format: uuid
        type: string
      lastUpdatedOn:
        format: date-time
        type: string
      lastUpdatedByUser:
        format: uuid
        type: string
      isDeleted:
        type: boolean
      version:
        format: uuid
        type: string
  'Core.Abstraction.ResultsPage`1[[Nallian.eEcd.Api.Abstractions.CreditData.WalletSummary, Nallian.eEcd.Api.Abstractions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]':
    type: object
    properties:
      hitCountTotal:
        format: int64
        type: integer
      hitCountPage:
        format: int64
        type: integer
      pageCurrent:
        format: int32
        type: integer
      pageSize:
        format: int32
        type: integer
      pageTotal:
        format: int32
        type: integer
      hasMorePages:
        type: boolean
      comment:
        type: string
      results:
        type: array
        items:
          $ref: '#/definitions/CreditData.WalletSummary'
  CreditData.WalletSummary:
    type: object
    properties:
      walletId:
        format: uuid
        type: string
      organisations:
        type: array
        items:
          format: uuid
          type: string
      warningThreshold:
        format: int32
        type: integer
      creditsPurchased:
        format: int32
        type: integer
      creditsRemaining:
        format: int32
        type: integer
      packsPurchased:
        format: int32
        type: integer
      packsActive:
        format: int32
        type: integer
      packIds:
        type: array
        items:
          format: uuid
          type: string
  'Core.Abstraction.ResultsPage`1[[Nallian.eEcd.Api.Abstractions.EEcdLog.EEcdLog, Nallian.eEcd.Api.Abstractions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]':
    type: object
    properties:
      hitCountTotal:
        format: int64
        type: integer
      hitCountPage:
        format: int64
        type: integer
      pageCurrent:
        format: int32
        type: integer
      pageSize:
        format: int32
        type: integer
      pageTotal:
        format: int32
        type: integer
      hasMorePages:
        type: boolean
      comment:
        type: string
      results:
        type: array
        items:
          $ref: '#/definitions/Log.EEcdLog'
  Log.EEcdLog:
    type: object
    properties:
      id:
        format: uuid
        type: string
      reference:
        type: string
      organisationId:
        format: uuid
        type: string
      bookletId:
        format: uuid
        type: string
      createdOn:
        format: date-time
        type: string
  ftcoCleaningCodes.EftcoCleaningCodeSummary:
    type: object
    properties:
      id:
        format: uuid
        type: string
      code:
        type: string
      description:
        type: string
  ftcoCleaningCodes.EftcoCleaningCodeCreate:
    type: object
    properties:
      code:
        type: string
      descriptions:
        type: object
        properties:
          NL:
            type: string
          EN:
            type: string
          FR:
            type: string
          DE:
            type: string
  Core.Entities.EftcoCleaningCode:
    type: object
    properties:
      code:
        type: string
      descriptions:
        type: object
        properties:
          NL:
            type: string
          EN:
            type: string
          FR:
            type: string
          DE:
            type: string
      id:
        format: uuid
        type: string
      createdOn:
        format: date-time
        type: string
      createdByUser:
        format: uuid
        type: string
      lastUpdatedOn:
        format: date-time
        type: string
      lastUpdatedByUser:
        format: uuid
        type: string
      isDeleted:
        type: boolean
      version:
        format: uuid
        type: string
  BookletData.Cleaning.CodeValidationResult:
    type: object
    properties:
      isValid:
        type: boolean
      errors:
        type: array
        items:
          type: string
      missingOptionalCodes:
        type: array
        items:
          type: string
  ftcoCleaningCodes.EftcoCleaningCodeUpdate:
    type: object
    properties:
      code:
        type: string
      descriptions:
        type: object
        properties:
          NL:
            type: string
          EN:
            type: string
          FR:
            type: string
          DE:
            type: string
  MasterData.Equipment:
    required:
      - equipmentType
    type: object
    properties:
      id:
        format: uuid
        type: string
      cleanliness:
        $ref: '#/definitions/quipment.EquipmentCleanliness'
      operatorId:
        format: uuid
        type: string
      equipmentType:
        enum:
          - TANKCONTAINER
          - TANKTRAILER
          - IBC
          - RAILTANK
        type: string
      subGroup:
        type: string
      numberOfManholes:
        format: int32
        type: integer
      numberOfCompartments:
        format: int32
        type: integer
      compartments:
        type: array
        items:
          $ref: '#/definitions/MasterData.Compartment'
      isSubContracted:
        type: boolean
      subContractor:
        type: string
      licensePlate:
        type: string
      internalEquipmentCode:
        type: string
      containerId:
        type: string
      isIso6346Compliant:
        type: boolean
  quipment.EquipmentCleanliness:
    type: object
    properties:
      state:
        enum:
          - CompletelyClean
          - PartiallyDirty
          - CompletelyDirty
        type: string
      compartments:
        type: object
        additionalProperties:
          $ref: '#/definitions/quipment.CompartmentCleanliness'
  MasterData.Compartment:
    type: object
    properties:
      key:
        type: string
      volume:
        format: int32
        type: integer
      baffles:
        format: int32
        type: integer
  quipment.CompartmentCleanliness:
    type: object
    properties:
      cleanliness:
        enum:
          - Clean
          - Dirty
        type: string
      polymerCompleteness:
        enum:
          - PolymerComplete
          - PolymerIncomplete
        type: string
  'Core.Abstraction.ResultsPage`1[[Nallian.eEcd.Api.Abstractions.MasterData.Equipment, Nallian.eEcd.Api.Abstractions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]':
    type: object
    properties:
      hitCountTotal:
        format: int64
        type: integer
      hitCountPage:
        format: int64
        type: integer
      pageCurrent:
        format: int32
        type: integer
      pageSize:
        format: int32
        type: integer
      pageTotal:
        format: int32
        type: integer
      hasMorePages:
        type: boolean
      comment:
        type: string
      results:
        type: array
        items:
          $ref: '#/definitions/MasterData.Equipment'
  MasterData.EquipmentPut:
    type: object
    properties:
      equipmentType:
        enum:
          - TANKCONTAINER
          - TANKTRAILER
          - IBC
          - RAILTANK
        type: string
      subGroup:
        type: string
      numberOfManholes:
        format: int32
        type: integer
      numberOfCompartments:
        format: int32
        type: integer
      compartments:
        type: array
        items:
          $ref: '#/definitions/MasterData.Compartment'
      isSubContracted:
        type: boolean
      subContractor:
        type: string
      licensePlate:
        type: string
      containerId:
        type: string
      isIso6346Compliant:
        type: boolean
      internalEquipmentCode:
        type: string
  MasterData.EquipmentImport:
    required:
      - equipmentType
    type: object
    properties:
      ref:
        format: int32
        type: integer
      operatorId:
        format: uuid
        type: string
      equipmentType:
        enum:
          - TANKCONTAINER
          - TANKTRAILER
          - IBC
          - RAILTANK
        type: string
      subGroup:
        type: string
      numberOfManholes:
        format: int32
        type: integer
      numberOfCompartments:
        format: int32
        type: integer
      compartments:
        type: array
        items:
          $ref: '#/definitions/MasterData.Compartment'
      isSubContracted:
        type: boolean
      subContractor:
        type: string
      licensePlate:
        type: string
      internalEquipmentCode:
        type: string
      containerId:
        type: string
      isIso6346Compliant:
        type: boolean
  MasterData.BulkResult:
    type: object
    properties:
      ref:
        format: int32
        type: integer
      id:
        format: uuid
        type: string
      success:
        type: boolean
      validationErrors:
        type: array
        items:
          $ref: '#/definitions/Common.ValidationError'
      errorMessage:
        type: string
        readOnly: true
  Common.ValidationError:
    type: object
    properties:
      key:
        type: string
      errors:
        type: array
        items:
          type: string
  MasterData.EquipmentDelete:
    type: object
    properties:
      ref:
        format: int32
        type: integer
      operatorId:
        format: uuid
        type: string
      equipmentType:
        enum:
          - TANKCONTAINER
          - TANKTRAILER
          - IBC
          - RAILTANK
        type: string
      licensePlate:
        type: string
      internalEquipmentCode:
        type: string
      containerId:
        type: string
  Organisations.Output.OrganisationMinimal:
    type: object
    properties:
      id:
        format: uuid
        type: string
      name:
        type: string
  MasterData.License:
    type: object
    properties:
      id:
        format: uuid
        type: string
      organisationId:
        format: uuid
        type: string
      licenseType:
        type: string
      isSeller:
        type: boolean
      isLoader:
        type: boolean
      isEquipmentOperator:
        type: boolean
      isCleaner:
        type: boolean
      isCommunityAdmin:
        type: boolean
      licenseeSize:
        type: string
      licenseNumber:
        format: int32
        type: integer
      licenseValidFrom:
        format: date-time
        type: string
      licenseValidUntil:
        format: date-time
        type: string
  'Core.Abstraction.ResultsPage`1[[Nallian.eEcd.Api.Abstractions.MasterData.ExigentLicenseSummary, Nallian.eEcd.Api.Abstractions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]':
    type: object
    properties:
      hitCountTotal:
        format: int64
        type: integer
      hitCountPage:
        format: int64
        type: integer
      pageCurrent:
        format: int32
        type: integer
      pageSize:
        format: int32
        type: integer
      pageTotal:
        format: int32
        type: integer
      hasMorePages:
        type: boolean
      comment:
        type: string
      results:
        type: array
        items:
          $ref: '#/definitions/MasterData.ExigentLicenseSummary'
  MasterData.ExigentLicenseSummary:
    type: object
    properties:
      organisationId:
        format: uuid
        type: string
      licenseId:
        format: uuid
        type: string
      organisationName:
        type: string
      isSeller:
        type: boolean
      isLoader:
        type: boolean
      isEquipmentOperator:
        type: boolean
      isCleaner:
        type: boolean
      isCommunityAdmin:
        type: boolean
      licenseValidUntil:
        format: date-time
        type: string
  LoadingLocation.LoadingLocationCreate:
    type: object
    properties:
      productId:
        format: uuid
        type: string
      loaderId:
        format: uuid
        type: string
      description:
        type: string
  Core.Entities.LoadingLocationData.LoadingLocation:
    type: object
    properties:
      sellerId:
        format: uuid
        type: string
      productId:
        format: uuid
        type: string
      loaderId:
        format: uuid
        type: string
      description:
        type: string
      people:
        type: array
        items:
          $ref: '#/definitions/Core.Entities.LoadingLocationData.LoadingLocationUser'
      id:
        format: uuid
        type: string
      createdOn:
        format: date-time
        type: string
      createdByUser:
        format: uuid
        type: string
      lastUpdatedOn:
        format: date-time
        type: string
      lastUpdatedByUser:
        format: uuid
        type: string
      isDeleted:
        type: boolean
      version:
        format: uuid
        type: string
  Core.Entities.LoadingLocationData.LoadingLocationUser:
    type: object
    properties:
      id:
        format: uuid
        type: string
      fullName:
        type: string
  LoadingLocation.LoadingLocationUpdate:
    type: object
    properties:
      productId:
        format: uuid
        type: string
      loaderId:
        format: uuid
        type: string
      description:
        type: string
  LoadingLocation.LoadingLocationImport:
    required:
      - uniqueRefererence
      - codeType
      - code
    type: object
    properties:
      ref:
        format: int32
        type: integer
      uniqueRefererence:
        type: string
      codeType:
        enum:
          - Nallian
          - Ean
          - Duns
          - Vat
          - Scac
          - Seagha
          - Alias
          - AS2
          - SenderIdentifier
          - IATA
          - GoodsAccountabilityPartyCode
          - BIC
          - Eori
          - NxtPortEntityId
        type: string
      code:
        type: string
      description:
        type: string
  'Core.Abstraction.ResultsPage`1[[Nallian.eEcd.Api.Abstractions.LoadingLocation.LoadingLocationDto, Nallian.eEcd.Api.Abstractions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]':
    type: object
    properties:
      hitCountTotal:
        format: int64
        type: integer
      hitCountPage:
        format: int64
        type: integer
      pageCurrent:
        format: int32
        type: integer
      pageSize:
        format: int32
        type: integer
      pageTotal:
        format: int32
        type: integer
      hasMorePages:
        type: boolean
      comment:
        type: string
      results:
        type: array
        items:
          $ref: '#/definitions/LoadingLocation.LoadingLocationDto'
  LoadingLocation.LoadingLocationDto:
    type: object
    properties:
      id:
        format: uuid
        type: string
      sellerId:
        format: uuid
        type: string
      productId:
        format: uuid
        type: string
      loaderid:
        format: uuid
        type: string
      description:
        type: string
  BookletData.LoadAssignment:
    type: object
    properties:
      productId:
        format: uuid
        type: string
      sellerId:
        format: uuid
        type: string
      loadDetails:
        $ref: '#/definitions/BookletData.LoadDetail'
      references:
        $ref: '#/definitions/BookletData.Reference'
      compartments:
        type: array
        items:
          type: string
  BookletData.Load:
    type: object
    properties:
      id:
        format: uuid
        type: string
      lastStatusDate:
        format: date-time
        type: string
      status:
        enum:
          - PLANNED
          - ACCEPTED
          - COMPLETED
          - REJECTED
          - CANCELLED
          - NONREGISTERED
          - MOVED
          - UPDATED
        type: string
      product:
        $ref: '#/definitions/BookletData.Product'
      loadDetails:
        $ref: '#/definitions/BookletData.LoadDetail'
      references:
        $ref: '#/definitions/BookletData.Reference'
      compartments:
        type: array
        items:
          type: string
      processStates:
        type: array
        items:
          $ref: '#/definitions/BookletData.LoadProcessState'
      attachments:
        type: array
        items:
          $ref: '#/definitions/BookletData.Attachment'
  BookletData.LoadAcceptation:
    type: object
    properties:
      productId:
        format: uuid
        type: string
  BookletData.LoadMigration:
    type: object
    properties:
      targetEquipmentId:
        format: uuid
        type: string
      comment:
        type: string
  BookletData.LoadRejection:
    type: object
    properties:
      comment:
        type: string
  BookletData.LoadCompletion:
    type: object
    properties:
      compartments:
        type: array
        items:
          type: string
  BookletData.NonregisteredLoad:
    type: object
    properties:
      productName:
        type: string
      loadDate:
        format: date-time
        type: string
      compartments:
        type: array
        items:
          type: string
      comment:
        type: string
  'Core.Abstraction.ResultsPage`1[[Nallian.eEcd.Api.Abstractions.BookletData.LoadSummary, Nallian.eEcd.Api.Abstractions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]':
    type: object
    properties:
      hitCountTotal:
        format: int64
        type: integer
      hitCountPage:
        format: int64
        type: integer
      pageCurrent:
        format: int32
        type: integer
      pageSize:
        format: int32
        type: integer
      pageTotal:
        format: int32
        type: integer
      hasMorePages:
        type: boolean
      comment:
        type: string
      results:
        type: array
        items:
          $ref: '#/definitions/BookletData.LoadSummary'
  BookletData.LoadSummary:
    type: object
    properties:
      id:
        format: uuid
        type: string
      customerReference:
        type: string
      equipment:
        $ref: '#/definitions/BookletData.BasicEquipment'
      product:
        $ref: '#/definitions/BookletData.Product'
      plannedLoadDetails:
        $ref: '#/definitions/BookletData.PlannedLoadDetails'
      compartments:
        type: array
        items:
          type: string
      status:
        enum:
          - PLANNED
          - ACCEPTED
          - COMPLETED
          - REJECTED
          - CANCELLED
          - NONREGISTERED
          - MOVED
          - UPDATED
        type: string
      displayDate:
        format: date-time
        type: string
  BookletData.BasicEquipment:
    type: object
    properties:
      id:
        format: uuid
        type: string
      uniqueEquipmentId:
        type: string
      internalEquipmentCode:
        type: string
      licensePlate:
        type: string
      operatorId:
        format: uuid
        type: string
      equipmentType:
        enum:
          - TANKCONTAINER
          - TANKTRAILER
          - IBC
          - RAILTANK
        type: string
  BookletData.PlannedLoadDetails:
    type: object
    properties:
      planner:
        type: string
      loadPlannedAt:
        format: date-time
        type: string
      location:
        type: string
  Users.Output.User:
    type: object
    properties:
      id:
        format: uuid
        type: string
      email:
        type: string
      fullName:
        type: string
      userState:
        type: string
      organisationId:
        format: uuid
        type: string
      organisationName:
        type: string
      createdOn:
        format: date-time
        type: string
      modifiedOn:
        format: date-time
        type: string
      license:
        $ref: '#/definitions/MasterData.LicenseSummary'
      roles:
        type: array
        items:
          $ref: '#/definitions/Users.Output.UserRole'
  MasterData.LicenseSummary:
    type: object
    properties:
      isSeller:
        type: boolean
      isLoader:
        type: boolean
      isEquipmentOperator:
        type: boolean
      isCleaner:
        type: boolean
      isCommunityAdmin:
        type: boolean
      licenseValidUntil:
        format: date-time
        type: string
  Users.Output.UserRole:
    type: object
    properties:
      id:
        format: uuid
        type: string
      name:
        type: string
  'Core.Abstraction.ResultsPage`1[[Nallian.eEcd.Api.Abstractions.Organisations.Output.Organisation, Nallian.eEcd.Api.Abstractions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]':
    type: object
    properties:
      hitCountTotal:
        format: int64
        type: integer
      hitCountPage:
        format: int64
        type: integer
      pageCurrent:
        format: int32
        type: integer
      pageSize:
        format: int32
        type: integer
      pageTotal:
        format: int32
        type: integer
      hasMorePages:
        type: boolean
      comment:
        type: string
      results:
        type: array
        items:
          $ref: '#/definitions/Organisations.Output.Organisation'
  Organisations.Output.Organisation:
    type: object
    properties:
      id:
        format: uuid
        type: string
      organisationName:
        type: string
      addressLines:
        type: object
        additionalProperties:
          type: string
      phone:
        type: string
      fax:
        type: string
      webSite:
        type: string
      duns:
        type: string
      vat:
        type: string
      eori:
        type: string
      roles:
        type: array
        items:
          $ref: '#/definitions/Organisations.Output.OrganisationRole'
  Organisations.Output.OrganisationRole:
    type: object
    properties:
      id:
        format: uuid
        type: string
      name:
        type: string
  Organisations.Input.OrganisationCreate:
    type: object
    properties:
      state:
        enum:
          - ACTIVE
          - DISABLED
        type: string
      roles:
        type: array
        items:
          format: uuid
          type: string
      name:
        type: string
      description:
        type: string
      countryCode:
        type: string
      city:
        type: string
      vat:
        type: string
      duns:
        type: string
      eori:
        type: string
  Organisations.Input.OrganisationUpdate:
    type: object
    properties:
      state:
        enum:
          - ACTIVE
          - DISABLED
        type: string
      roles:
        type: array
        items:
          format: uuid
          type: string
      name:
        type: string
      description:
        type: string
      countryCode:
        type: string
      city:
        type: string
      vat:
        type: string
      duns:
        type: string
      eori:
        type: string
  MasterData.Product:
    required:
      - sellerId
      - uniqueReference
    type: object
    properties:
      id:
        format: uuid
        type: string
      loaders:
        type: array
        items:
          format: uuid
          type: string
      sellerId:
        format: uuid
        type: string
      sellerName:
        type: string
      productType:
        enum:
          - CHEMICAL
          - FOOD
          - FEED
          - PHARMA
        type: string
      subGroup:
        type: string
      articleNumber:
        type: string
      articleName:
        type: string
      unNumber:
        type: string
      maximumEcdValidity:
        format: int32
        type: integer
      uniqueReference:
        type: string
      sdsInfo:
        type: array
        items:
          $ref: '#/definitions/MasterData.SdsInfo'
  MasterData.SdsInfo:
    required:
      - sdsDate
      - language
      - linkType
    type: object
    properties:
      fileLocation:
        type: string
      fileType:
        type: string
      version:
        type: string
      sdsDate:
        format: date-time
        type: string
      language:
        enum:
          - NL
          - EN
          - FR
          - DE
        type: string
      linkType:
        enum:
          - D
          - L
        type: string
      link:
        type: string
  MasterData.ProductImport:
    required:
      - sellerId
      - uniqueReference
    type: object
    properties:
      ref:
        format: int32
        type: integer
      loaders:
        type: array
        items:
          $ref: '#/definitions/MasterData.Loader'
      sellerId:
        format: uuid
        type: string
      sellerName:
        type: string
      productType:
        enum:
          - CHEMICAL
          - FOOD
          - FEED
          - PHARMA
        type: string
      subGroup:
        type: string
      articleNumber:
        type: string
      articleName:
        type: string
      unNumber:
        type: string
      maximumEcdValidity:
        format: int32
        type: integer
      uniqueReference:
        type: string
      sdsInfo:
        type: array
        items:
          $ref: '#/definitions/MasterData.SdsInfo'
  MasterData.Loader:
    type: object
    properties:
      codeType:
        enum:
          - Nallian
          - Ean
          - Duns
          - Vat
          - Scac
          - Seagha
          - Alias
          - AS2
          - SenderIdentifier
          - IATA
          - GoodsAccountabilityPartyCode
          - BIC
          - Eori
          - NxtPortEntityId
        type: string
      code:
        type: string
  MasterData.ProductDelete:
    type: object
    properties:
      ref:
        format: int32
        type: integer
      sellerId:
        format: uuid
        type: string
      uniqueReference:
        type: string
  MasterData.Sds:
    required:
      - sdsDate
      - language
      - linkType
    type: object
    properties:
      version:
        type: string
      sdsDate:
        format: date-time
        type: string
      language:
        enum:
          - NL
          - EN
          - FR
          - DE
        type: string
      linkType:
        enum:
          - D
          - L
        type: string
      link:
        type: string
  MasterData.SdsImport:
    required:
      - sdsDate
      - language
      - linkType
    type: object
    properties:
      ref:
        format: int32
        type: integer
      sellerId:
        format: uuid
        type: string
      uniqueReference:
        type: string
      version:
        type: string
      sdsDate:
        format: date-time
        type: string
      language:
        enum:
          - NL
          - EN
          - FR
          - DE
        type: string
      linkType:
        enum:
          - D
          - L
        type: string
      link:
        type: string
  MasterData.UploadSdsDocumentResult:
    type: object
    properties:
      link:
        type: string
      fileSize:
        format: int64
        type: integer
  Users.Input.UserCreate:
    type: object
    properties:
      organisationId:
        format: uuid
        type: string
      fullName:
        type: string
      userName:
        type: string
      externalId:
        type: string
      roles:
        type: array
        items:
          format: uuid
          type: string
      state:
        enum:
          - ACTIVE
          - DISABLED
        type: string
      language:
        enum:
          - NL
          - EN
          - FR
          - DE
        type: string
      timezone:
        format: int32
        type: integer
  Users.Input.UserUpdate:
    type: object
    properties:
      organisationId:
        format: uuid
        type: string
      fullName:
        type: string
      userName:
        type: string
      externalId:
        type: string
      roles:
        type: array
        items:
          format: uuid
          type: string
      state:
        enum:
          - ACTIVE
          - DISABLED
        type: string
      language:
        enum:
          - NL
          - EN
          - FR
          - DE
        type: string
      timezone:
        format: int32
        type: integer
  Users.Input.UserRoleUpdate:
    type: object
    properties:
      roleIDs:
        type: array
        items:
          format: uuid
          type: string
